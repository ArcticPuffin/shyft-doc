<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classshyft_1_1core_1_1model__calibration_1_1optimizer" kind="class" language="C++" prot="public">
    <compoundname>shyft::core::model_calibration::optimizer</compoundname>
    <includes refid="model__calibration_8h" local="no">model_calibration.h</includes>
    <templateparamlist>
      <param>
        <type>class M</type>
      </param>
      <param>
        <type>class PA</type>
      </param>
      <param>
        <type>class PS</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a83d9d8f6778b39a0da125c5c82d534ef" prot="public" static="no">
        <type>dlib::matrix&lt; double, 0, 1 &gt;</type>
        <definition>typedef dlib::matrix&lt;double, 0, 1&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::column_vector</definition>
        <argsstring></argsstring>
        <name>column_vector</name>
        <briefdescription>
<para>dlib optimizer enjoys dlib matrix types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="322" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a465f447636d0348323d8310a7c89f499" prot="public" static="no">
        <type>PS</type>
        <definition>typedef PS shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::target_time_series_t</definition>
        <argsstring></argsstring>
        <name>target_time_series_t</name>
        <briefdescription>
<para>target_time_series_t. could that be of same type as model calc, always, or is it supplied from outside? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="323" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" prot="public" static="no">
        <type><ref refid="structshyft_1_1core_1_1model__calibration_1_1target__specification" kindref="compound">target_specification</ref>&lt; PS &gt;</type>
        <definition>typedef target_specification&lt;PS&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::target_specification_t</definition>
        <argsstring></argsstring>
        <name>target_specification_t</name>
        <briefdescription>
<para>describes how to calculate the goal function, maybe better &apos;retemplate&apos; on this </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="325" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6793d8d0161d269d05c0f9563d7f6dab" prot="public" static="no">
        <type>M</type>
        <definition>typedef M shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::region_model_t</definition>
        <argsstring></argsstring>
        <name>region_model_t</name>
        <briefdescription>
<para>obvious and Ok template, the <ref refid="classshyft_1_1core_1_1region__model" kindref="compound">region_model</ref>, and there is just a few things that we need from this template. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="326" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa2b80f7e1be5ddf42a284626ff695201" prot="public" static="no">
        <type>M::state_t</type>
        <definition>typedef M::state_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::state_t</definition>
        <argsstring></argsstring>
        <name>state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="327" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aeb3992fa4a88c3036683dae1dd9af4fa" prot="public" static="no">
        <type>M::parameter_t</type>
        <definition>typedef M::parameter_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::parameter_t</definition>
        <argsstring></argsstring>
        <name>parameter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="328" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6032a61ce6a869e7de4f5831aaa5356b" prot="public" static="no">
        <type>M::cell_t</type>
        <definition>typedef M::cell_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::cell_t</definition>
        <argsstring></argsstring>
        <name>cell_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="329" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" prot="public" static="no">
        <type>cell_t::response_collector_t</type>
        <definition>typedef cell_t::response_collector_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::response_collector_t</definition>
        <argsstring></argsstring>
        <name>response_collector_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="330" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aafdd315906e5219d9e0a8b8ee8dfbc76" prot="public" static="no" mutable="no">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::parameter_lower_bound</definition>
        <argsstring></argsstring>
        <name>parameter_lower_bound</name>
        <briefdescription>
<para>current setting of parameter lower bound </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="332" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a2dd3434d467e6f079d7b77b78e61b96d" prot="public" static="no" mutable="no">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::parameter_upper_bound</definition>
        <argsstring></argsstring>
        <name>parameter_upper_bound</name>
        <briefdescription>
<para>current setting of parameter upper bound </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="333" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aef726f27748c090027974d4a7083b195" prot="public" static="no" mutable="no">
        <type>PA &amp;</type>
        <definition>PA&amp; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::parameter_accessor</definition>
        <argsstring></argsstring>
        <name>parameter_accessor</name>
        <briefdescription>
<para>a <emphasis>reference</emphasis> to the model parameters in the target model, all cells share this! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="334" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a47be90108bd371cf748a9c53d42970a7" prot="public" static="no" mutable="no">
        <type><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6793d8d0161d269d05c0f9563d7f6dab" kindref="member">region_model_t</ref> &amp;</type>
        <definition>region_model_t&amp; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
<para>a reference to the region model that we optimize </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="335" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a952151b56ed526fba4448da8b1961c9a" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &gt;</type>
        <definition>vector&lt;target_specification_t&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::targets</definition>
        <argsstring></argsstring>
        <name>targets</name>
        <briefdescription>
<para>list of targets ts&amp; catchments indexes to be optimized, used to calculate goal function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="336" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a9a406510ad6941f4d4a11f6e197ba56a" prot="private" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::p_expanded</definition>
        <argsstring></argsstring>
        <name>p_expanded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="339" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a96ad06f443e7b20432f0dd4be539ecd2" prot="private" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::p_min</definition>
        <argsstring></argsstring>
        <name>p_min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="340" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a32b486caf765b0707b831c57338ab90c" prot="private" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::p_max</definition>
        <argsstring></argsstring>
        <name>p_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="341" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ad1fe7c3580ac1204fe6acc2d3e21564b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::print_progress_level</definition>
        <argsstring></argsstring>
        <name>print_progress_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="342" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a61e69487e0a023199f9d9a9199db9745" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::n_catchments</definition>
        <argsstring></argsstring>
        <name>n_catchments</name>
        <briefdescription>
<para>optimized counted number of model.catchments available </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="343" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6cde66292c3b21239e317342c6540a5e" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::activate_limit</definition>
        <argsstring></argsstring>
        <name>activate_limit</name>
        <initializer>= 0.000001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="345" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a27b2fc3d4a8b6513eeac7ab68a73ce2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class calibration_test</definition>
        <argsstring></argsstring>
        <name>calibration_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="577" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a384e447fd9df3dcbfb47f9fc6ccbf295" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::active_parameter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>active_parameter</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="337" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ab1bfa9505b131d6f465d3a41f6996819" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimizer</definition>
        <argsstring>(region_model_t &amp;model, const vector&lt; target_specification_t &gt; &amp;targetsA, const vector&lt; double &gt; &amp;p_min, const vector&lt; double &gt; &amp;p_max)</argsstring>
        <name>optimizer</name>
        <param>
          <type><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6793d8d0161d269d05c0f9563d7f6dab" kindref="member">region_model_t</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &gt; &amp;</type>
          <declname>targetsA</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>p_min</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>p_max</declname>
        </param>
        <briefdescription>
<para>construct an opt model for ptgsk, use p_min=p_max to disable optimization for a parameter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the model to be optimized, the model should be initialized, i.e. the interpolation step done. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetsA</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies how to calculate the goal-function, <ref refid="structshyft_1_1core_1_1model__calibration_1_1target__specification" kindref="compound">shyft::core::model_calibration::target_specification</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum values for the parameters to be optimized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum values for the parameters to be optimized </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="380" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a127beaee84ddbafc8dc4e7d536f141aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimizer</definition>
        <argsstring>(region_model_t &amp;model)</argsstring>
        <name>optimizer</name>
        <param>
          <type><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6793d8d0161d269d05c0f9563d7f6dab" kindref="member">region_model_t</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an optimizer based on the supplied model, kept as a reference(!) To optimize, first call <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a4fce112251127c578f95a5b5d6513f97" kindref="member">set_target_specification()</ref>, then call any of optimize_xxx(...) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="393" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a4fce112251127c578f95a5b5d6513f97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::set_target_specification</definition>
        <argsstring>(const vector&lt; target_specification_t &gt; &amp;targetsA, const PA &amp;param_lower_bound, const PA &amp;param_upper_bound)</argsstring>
        <name>set_target_specification</name>
        <param>
          <type>const vector&lt; <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &gt; &amp;</type>
          <declname>targetsA</declname>
        </param>
        <param>
          <type>const PA &amp;</type>
          <declname>param_lower_bound</declname>
        </param>
        <param>
          <type>const PA &amp;</type>
          <declname>param_upper_bound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set all parameters that matters for the calibration. The lower and upper bounds determines which parameters are subject to calibration. If lower and upper bound are equal, the parameter is untouched during calibration (regardless value)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>targetsA</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the goal function description </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param_lower_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the lower bound of the parameter set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param_upper_bound</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the upper bound of the parameter set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="407" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a21c6266ecc38acb0bdaf9087b98506ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::establish_initial_state_from_model</definition>
        <argsstring>()</argsstring>
        <name>establish_initial_state_from_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy the model current state into internal store of the calibration class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="414" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="414" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a09a6c7fc24fe060f682939392e424c1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::prepare_optimize</definition>
        <argsstring>()</argsstring>
        <name>prepare_optimize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prepare the optimization process by looking at the current state of the supplied parameters. Ensures :<orderedlist>
<listitem><para>the model have a global parameter-set</para></listitem><listitem><para>the collection of SCA/SWE is turned on if requested</para></listitem><listitem><para>the catchment-filter is set according to target-specification request </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="427" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="427" bodyend="455"/>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a5668311af81a0424b26f96379c9ea756aa948a33766c00e5ed6144fc0451c303d" compoundref="model__calibration_8h" startline="162">shyft::core::model_calibration::DISCHARGE</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1adc562b9ec817dca734b5a01b427bb619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::auto_initial_state_check</definition>
        <argsstring>()</argsstring>
        <name>auto_initial_state_check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="456" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="456" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a973f82e36d67ddb753a2c05dff0ddef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa2b80f7e1be5ddf42a284626ff695201" kindref="member">state_t</ref></type>
        <definition>state_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::get_initial_state</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>get_initial_state</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the initial state for the i&apos;th cell </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="465" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1adfe129bd152e378a6123493839fcc19c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize</definition>
        <argsstring>(vector&lt; double &gt; p, size_t max_n_evaluations=1500, double tr_start=0.1, double tr_stop=1.0e-5)</argsstring>
        <name>optimize</name>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tr_start</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tr_stop</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
<para>Call to optimize model, starting with p parameter set, using p_min..p_max as boundaries. where p is the full parameter vector. the p_min,p_max specified in constructor is used to reduce the parameterspace for the optimizer down to a minimum number to facilitate fast run. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the starting point for the parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop after n calls of the objective functions, i.e. simulations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr_start</parametername>
</parameternamelist>
<parameterdescription>
<para>is the trust region start , default 0.1, ref bobyqa </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr_stop</parametername>
</parameternamelist>
<parameterdescription>
<para>is the trust region stop, default 1e-5, ref bobyqa </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the optimized parameter vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="480" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="480" bodyend="489"/>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a29d1dd6f07e3da2747064b5f2de13eed" compoundref="model__calibration_8h" startline="31">shyft::core::model_calibration::min_bobyqa</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a683ed17fa2154d1ef87dcbb457c3e0b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize</definition>
        <argsstring>(const PA &amp;p, size_t max_n_evaluations=1500, double tr_start=0.1, double tr_stop=1.0e-5)</argsstring>
        <name>optimize</name>
        <param>
          <type>const PA &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tr_start</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tr_stop</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optimize using minbobyqa, using p as starting parameters, return new optimized parameters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="492" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="492" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3220c4464a7735f03ad4494b9f956db0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize_dream</definition>
        <argsstring>(vector&lt; double &gt; p, size_t max_n_evaluations=1500)</argsstring>
        <name>optimize_dream</name>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <briefdescription>
<para>Call to optimize model, using DREAM alg., find p, using p_min..p_max as boundaries. where p is the full parameter vector. the p_min,p_max specified in constructor is used to reduce the parameterspace for the optimizer down to a minimum number to facilitate fast run. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is used as start point (not really, DREAM use random, but we should be able to pass u and q.... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop after n calls of the objective functions, i.e. simulations. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the optimized parameter vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="506" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="506" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa176e5163bfc801c93a258cd298691c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize_dream</definition>
        <argsstring>(const PA &amp;p, size_t max_n_evaluations=1500)</argsstring>
        <name>optimize_dream</name>
        <param>
          <type>const PA &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optimize using the dream algorithm, returning the new optimized parameter set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="516" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="516" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa9ab8e4f1225013de73d7ab2472ef03d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize_sceua</definition>
        <argsstring>(vector&lt; double &gt; p, size_t max_n_evaluations=1500, double x_eps=0.0001, double y_eps=1.0e-5)</argsstring>
        <name>optimize_sceua</name>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <param>
          <type>double</type>
          <declname>x_eps</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type>double</type>
          <declname>y_eps</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
<para>Call to optimize model, using SCE UA, using p as startpoint, find p, using p_min..p_max as boundaries. where p is the full parameter vector. the p_min,p_max specified in constructor is used to reduce the parameterspace for the optimizer down to a minimum number to facilitate fast run. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>is used as start point and is updated with the found optimal points </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop after n calls of the objective functions, i.e. simulations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_eps</parametername>
</parameternamelist>
<parameterdescription>
<para>is stop condition when all changes in x&apos;s are within this range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_eps</parametername>
</parameternamelist>
<parameterdescription>
<para>is stop condition, and search is stopped when goal function does not improve anymore within this range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the optimized parameter vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="532" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="532" bodyend="540"/>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a382ab7d062b7bfa5337fd166f81c83e6" compoundref="model__calibration_8h" startline="108" endline="129">shyft::core::model_calibration::min_sceua</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5f40ae12b9673f513fbe3ccc3c679caf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize_sceua</definition>
        <argsstring>(const PA &amp;p, size_t max_n_evaluations=1500, double x_eps=0.0001, double y_eps=1.0e-5)</argsstring>
        <name>optimize_sceua</name>
        <param>
          <type>const PA &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
          <defval>1500</defval>
        </param>
        <param>
          <type>double</type>
          <declname>x_eps</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type>double</type>
          <declname>y_eps</declname>
          <defval>1.0e-5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optimize using the dream algorithm, returning the new optimized parameter set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="543" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="543" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1abd875cab3afb4f296ab96879964d8449" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::reset_states</definition>
        <argsstring>()</argsstring>
        <name>reset_states</name>
        <briefdescription>
<para>reset the state of the model to the initial state before starting the run/optimize </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="550" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="550" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aace152222deb93cf6b6f8bdf818952a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::set_parameter_ranges</definition>
        <argsstring>(const vector&lt; double &gt; &amp;p_min, const vector&lt; double &gt; &amp;p_max)</argsstring>
        <name>set_parameter_ranges</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>p_min</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>p_max</declname>
        </param>
        <briefdescription>
<para>set the parameter ranges, set min=max=wanted parameter value for those not subject to change during optimization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="554" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="554" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1acbdadaf09aaabcc10ddd5158f73bd2d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::set_verbose_level</definition>
        <argsstring>(int level)</argsstring>
        <name>set_verbose_level</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="559" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ae9ab44d07a6f55984e218483456bd757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::calculate_goal_function</definition>
        <argsstring>(std::vector&lt; double &gt; full_vector_of_parameters)</argsstring>
        <name>calculate_goal_function</name>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>full_vector_of_parameters</declname>
        </param>
        <briefdescription>
<para>calculate the goal_function as used by minbobyqa, using the full set of parameters vectors (as passed to <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1adfe129bd152e378a6123493839fcc19c" kindref="member">optimize()</ref>) and also ensures that the shyft state/cell/catchment result is consistent with the passed parameters passed </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>full_vector_of_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>contains all parameters that will be applied to the run. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the goal-function, weigthed nash_sutcliffe sum </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="567" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="567" bodyend="570"/>
        <references refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="151" endline="220">shyft::core::pt_hs_k::run</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a43bb8a6b3dae6b513c68ea78176e599a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::calculate_goal_function</definition>
        <argsstring>(const PA &amp;p)</argsstring>
        <name>calculate_goal_function</name>
        <param>
          <type>const PA &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the goal function with the specified parameter set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="573" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="573" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af72de88358821a048432b9d099f0b397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::operator()</definition>
        <argsstring>(const column_vector &amp;p_s)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a83d9d8f6778b39a0da125c5c82d534ef" kindref="member">column_vector</ref> &amp;</type>
          <declname>p_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called by bobyqua: </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="579" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="579" bodyend="579"/>
        <references refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="151" endline="220">shyft::core::pt_hs_k::run</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a619914f52ab547f433676cba5cd90135" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::operator()</definition>
        <argsstring>(const vector&lt; double &gt; &amp;p_s)</argsstring>
        <name>operator()</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>p_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="580" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="580" bodyend="580"/>
        <references refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="151" endline="220">shyft::core::pt_hs_k::run</references>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a1e761e88720beecc3215cc19145a819e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::to_scaled</definition>
        <argsstring>(const vector&lt; double &gt; &amp;rp) const</argsstring>
        <name>to_scaled</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called by bobyqua:reduced parameter space p </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="583" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="583" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6a3e7fa6ba021b21f6a1abbb1a738c96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::from_scaled</definition>
        <argsstring>(column_vector p_s) const</argsstring>
        <name>from_scaled</name>
        <param>
          <type><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a83d9d8f6778b39a0da125c5c82d534ef" kindref="member">column_vector</ref></type>
          <declname>p_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called by bobyqua: reduced parameter space p </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="595" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="595" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5452f8182035974ac2a772f57d5d4792" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::from_scaled</definition>
        <argsstring>(vector&lt; double &gt; p_s) const</argsstring>
        <name>from_scaled</name>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>p_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>called by bobyqua: reduced parameter space p </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="606" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="606" bodyend="615"/>
        <references refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0eaa7a710c91f7e701c216acf4a4610f1815" compoundref="core_2timeseries_8h" startline="62">shyft::timeseries::POINT_AVERAGE_VALUE</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1a51a4f8c548bdbd772c80e90afc7a58ca" compoundref="model__calibration_8h" startline="236">shyft::core::model_calibration::target_specification&lt; PS &gt;::catchment_indexes</references>
        <references refid="structshyft_1_1timeseries_1_1point__ts_1a7ff6a713fa1a9c426404337d938b4aca" compoundref="core_2timeseries_8h" startline="328" endline="328">shyft::timeseries::point_ts&lt; TA &gt;::add</references>
        <references refid="structshyft_1_1timeseries_1_1point__ts_1a274ca3cf435c1bd52f094220344abdbb" compoundref="core_2timeseries_8h" startline="332" endline="334">shyft::timeseries::point_ts&lt; TA &gt;::add_scale</references>
        <references refid="structshyft_1_1timeseries_1_1point__ts_1a3c389ed08d8722888c232d063294562f" compoundref="core_2timeseries_8h" startline="337" endline="337">shyft::timeseries::point_ts&lt; TA &gt;::scale_by</references>
        <references refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="151" endline="220">shyft::core::pt_hs_k::run</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1ae2d177d50d48331c1dd7d8f908fc9e51" compoundref="model__calibration_8h" startline="235">shyft::core::model_calibration::target_specification&lt; PS &gt;::ts</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1aba3f49d5c686649c131aaa04dd3bd5dc" compoundref="model__calibration_8h" startline="239">shyft::core::model_calibration::target_specification&lt; PS &gt;::catchment_property</references>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a5668311af81a0424b26f96379c9ea756aa948a33766c00e5ed6144fc0451c303d" compoundref="model__calibration_8h" startline="162">shyft::core::model_calibration::DISCHARGE</references>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a5668311af81a0424b26f96379c9ea756a3b51a4a7d6566b611f89b8e6d6e76412" compoundref="model__calibration_8h" startline="163">shyft::core::model_calibration::SNOW_COVERED_AREA</references>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a5668311af81a0424b26f96379c9ea756a48dacfdcfa0a727aa9f9cb4ff028c7ed" compoundref="model__calibration_8h" startline="164">shyft::core::model_calibration::SNOW_WATER_EQUIVALENT</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1a35c78b4a2dca83b72b4816171bbbaa2d" compoundref="model__calibration_8h" startline="238">shyft::core::model_calibration::target_specification&lt; PS &gt;::calc_mode</references>
        <references refid="namespaceshyft_1_1core_1_1model__calibration_1a1d095e2da6d4d8f6e04f7d731a7ba36eab41aca78a12a708091116416ba16e6a7" compoundref="model__calibration_8h" startline="156">shyft::core::model_calibration::NASH_SUTCLIFFE</references>
        <references refid="namespaceshyft_1_1timeseries_1ac3ecf5b3080c2f416bb7737978cfdbcc" compoundref="core_2timeseries_8h" startline="1220" endline="1237">shyft::timeseries::nash_sutcliffe_goal_function</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1adc8d69e382b1d49f01166393e8b824ee" compoundref="model__calibration_8h" startline="240">shyft::core::model_calibration::target_specification&lt; PS &gt;::s_r</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1a841599719fd6af67e27e2aba95535e1d" compoundref="model__calibration_8h" startline="241">shyft::core::model_calibration::target_specification&lt; PS &gt;::s_a</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1a11eb78fb56ee74e532ac6a519193d95b" compoundref="model__calibration_8h" startline="242">shyft::core::model_calibration::target_specification&lt; PS &gt;::s_b</references>
        <references refid="structshyft_1_1core_1_1model__calibration_1_1target__specification_1ad1d153a874af9473b2496eba9ce21da1" compoundref="model__calibration_8h" startline="237">shyft::core::model_calibration::target_specification&lt; PS &gt;::scale_factor</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a9eff532fd0d086d9bfeab70e5f191592" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::is_active_parameter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>is_active_parameter</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="346" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a2a27a80800f3e53b691560c3c662bfe4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::reduce_p_vector</definition>
        <argsstring>(const vector&lt; double &gt; &amp;fp) const</argsstring>
        <name>reduce_p_vector</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="348" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="348" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6aa5d65615c8f009511c92d115fd4710" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::expand_p_vector</definition>
        <argsstring>(const vector&lt; double &gt; &amp;rp) const</argsstring>
        <name>expand_p_vector</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="356" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="356" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5f1ba80c2364107b6f90043224e04561" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::p_vector</definition>
        <argsstring>(const PA &amp;p) const</argsstring>
        <name>p_vector</name>
        <param>
          <type>const PA &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="367" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af3737f43d9b5aaddc5a75ecd756ca283" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PA</type>
        <definition>PA shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::vector_p</definition>
        <argsstring>(const vector&lt; double &gt; &amp;v) const</argsstring>
        <name>vector_p</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="368" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="368" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a448df1858f45c004dd287a7df4242fe0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref></type>
        <definition>pts_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_discharge_sum</definition>
        <argsstring>(const target_specification_t &amp;t, vector&lt; pts_t &gt; &amp;catchment_d) const</argsstring>
        <name>compute_discharge_sum</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref> &gt; &amp;</type>
          <declname>catchment_d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="618" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="618" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a98f4eb58e8e5906c6f43a8014e676727" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class property_ts_function</type>
          </param>
        </templateparamlist>
        <type>vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt;</type>
        <definition>vector&lt;area_ts&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::extract_area_ts_property</definition>
        <argsstring>(property_ts_function &amp;&amp;tsf) const</argsstring>
        <name>extract_area_ts_property</name>
        <param>
          <type>property_ts_function &amp;&amp;</type>
          <declname>tsf</declname>
        </param>
        <briefdescription>
<para>extracts vector of <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> for all calculated catchments using the given property function tsf that should have signature pts_t (const cell&amp; c) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>that this function sum together contributions at cell-level. TODO: Avoid duplicate code, - use average_catchment_feature(*model.cells, catchment_index, []() return c.rc.snow_sca) but it returns a shared_ptr.. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="633" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="633" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af3a6eb0cb255d31f2097cbf487a9975e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref></type>
        <definition>pts_t shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_weighted_area_ts_average</definition>
        <argsstring>(const target_specification_t &amp;t, const vector&lt; area_ts &gt; &amp;ats) const</argsstring>
        <name>compute_weighted_area_ts_average</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt; &amp;</type>
          <declname>ats</declname>
        </param>
        <briefdescription>
<para>returns the area weighted sum of vector&lt;area_ts&gt; according to t.catchment_indexes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="648" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="648" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a78983b7acbcb5b24db9a078c14b2c37e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class rc_t</type>
            <defval><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" kindref="member">response_collector_t</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceshyft_1_1core_1_1model__calibration_1adcd89ab052593045e6ce5c0fb061cfee" kindref="member">enable_if_tx</ref>&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__sca" kindref="compound">detect_snow_sca</ref>&lt; rc_t &gt;::value, <ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref> &gt;</type>
        <definition>enable_if_tx&lt;detect_snow_sca&lt;rc_t&gt;::value, pts_t&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_sca_sum</definition>
        <argsstring>(const target_specification_t &amp;t, vector&lt; area_ts &gt; &amp;catchment_sca) const</argsstring>
        <name>compute_sca_sum</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt; &amp;</type>
          <declname>catchment_sca</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="663" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="663" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aae549b5efef1ef1a82484e696f553203" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class rc_t</type>
            <defval><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" kindref="member">response_collector_t</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceshyft_1_1core_1_1model__calibration_1adcd89ab052593045e6ce5c0fb061cfee" kindref="member">enable_if_tx</ref>&lt;!<ref refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__sca" kindref="compound">detect_snow_sca</ref>&lt; rc_t &gt;::value, <ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref> &gt;</type>
        <definition>enable_if_tx&lt;!detect_snow_sca&lt;rc_t&gt;::value, pts_t&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_sca_sum</definition>
        <argsstring>(const target_specification_t &amp;t, vector&lt; area_ts &gt; &amp;catchment_d) const</argsstring>
        <name>compute_sca_sum</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt; &amp;</type>
          <declname>catchment_d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="671" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a05321dcb661a83e95c97945180d945c9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class rc_t</type>
            <defval><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" kindref="member">response_collector_t</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceshyft_1_1core_1_1model__calibration_1adcd89ab052593045e6ce5c0fb061cfee" kindref="member">enable_if_tx</ref>&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__swe" kindref="compound">detect_snow_swe</ref>&lt; rc_t &gt;::value, <ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref> &gt;</type>
        <definition>enable_if_tx&lt;detect_snow_swe&lt;rc_t&gt;::value, pts_t&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_swe_sum</definition>
        <argsstring>(const target_specification_t &amp;t, vector&lt; area_ts &gt; &amp;catchment_swe) const</argsstring>
        <name>compute_swe_sum</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt; &amp;</type>
          <declname>catchment_swe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="681" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="681" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a84e11143e2e5c8ec9bb563be4d224cee" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class rc_t</type>
            <defval><ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" kindref="member">response_collector_t</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceshyft_1_1core_1_1model__calibration_1adcd89ab052593045e6ce5c0fb061cfee" kindref="member">enable_if_tx</ref>&lt;!<ref refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__swe" kindref="compound">detect_snow_swe</ref>&lt; rc_t &gt;::value, <ref refid="namespaceshyft_1_1core_1a78d0ca8964be5db44a5022740019e7fc" kindref="member">pts_t</ref> &gt;</type>
        <definition>enable_if_tx&lt;!detect_snow_swe&lt;rc_t&gt;::value, pts_t&gt; shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::compute_swe_sum</definition>
        <argsstring>(const target_specification_t &amp;t, vector&lt; area_ts &gt; &amp;catchment_d) const</argsstring>
        <name>compute_swe_sum</name>
        <param>
          <type>const <ref refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" kindref="member">target_specification_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" kindref="compound">area_ts</ref> &gt; &amp;</type>
          <declname>catchment_d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="687" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="687" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a32030f03ba19e7857b7f75ac9720f131" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::run</definition>
        <argsstring>(const vector&lt; double &gt; &amp;rp)</argsstring>
        <name>run</name>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>rp</declname>
        </param>
        <briefdescription>
<para>from operator(), called by min_bobyqa, for each iteration, so p is bobyqa parameter vector notice that the function returns the value of the goal function, as specified by the target specification. The flexibility is rather large: It&apos;s a set of target-specifications, weighted, where each of them can be a KG or NS, for a specified period/resolution. E.g. we can specify targets that apply to specific catchments, and specified periods/resolutions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="698" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="698" bodyend="751"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The optimizer for parameters in a <ref refid="classshyft_1_1core_1_1region__model" kindref="compound">shyft::core::region_model</ref> provides needed functionality to orchestrate a search for the optimal parameters so that the goal function specified by the target_specifications are minmized. The user can specify which parameters (model specific) to optimize, giving range min..max for each of the parameters. Only parameters with min != max are used, thus minimizing the parameter space. </para>    </briefdescription>
    <detaileddescription>
<para>Target specification <ref refid="structshyft_1_1core_1_1model__calibration_1_1target__specification" kindref="compound">target_specification</ref> allows a lot of flexiblity when it comes to what goes into the <ref refid="namespaceshyft_1_1timeseries_1ac3ecf5b3080c2f416bb7737978cfdbcc" kindref="member">shyft::timeseries::nash_sutcliffe_goal_function</ref> or kling-gupta function.</para><para>The search for optimium starts with the current parameter-set, the current start state, over the specified model time-axis. After a run, the goal function is calculated and returned back to the minbobyqa algorithm that continue searching for the minimum value until tolerances/iterations area reached.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>the region model, and we use that supports the following member:<orderedlist>
<listitem><para>.<ref refid="namespaceshyft_1_1time__axis" kindref="compound">time_axis</ref>, a time-axis value and type used by the model, the optimizer needs this during goal function evaluation.</para></listitem><listitem><para>.<ref refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" kindref="member">run()</ref>, the region model from state (s0) over .<ref refid="namespaceshyft_1_1time__axis" kindref="compound">time_axis</ref>, using current values of parameters.</para></listitem></orderedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PA</parametername>
</parameternamelist>
<parameterdescription>
<para>a template parameter for the parameters, supporting vector form access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PS</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the target time-series, inside. the target specification..(SiH: can we turn it the other way around ??) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" line="320" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/model_calibration.h" bodystart="320" bodyend="752"/>
    <listofallmembers>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6cde66292c3b21239e317342c6540a5e" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>activate_limit</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a384e447fd9df3dcbfb47f9fc6ccbf295" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>active_parameter</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1adc562b9ec817dca734b5a01b427bb619" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>auto_initial_state_check</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ae9ab44d07a6f55984e218483456bd757" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>calculate_goal_function</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a43bb8a6b3dae6b513c68ea78176e599a" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>calculate_goal_function</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a27b2fc3d4a8b6513eeac7ab68a73ce2a" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>calibration_test</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6032a61ce6a869e7de4f5831aaa5356b" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>cell_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a83d9d8f6778b39a0da125c5c82d534ef" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>column_vector</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a448df1858f45c004dd287a7df4242fe0" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_discharge_sum</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a78983b7acbcb5b24db9a078c14b2c37e" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_sca_sum</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aae549b5efef1ef1a82484e696f553203" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_sca_sum</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a05321dcb661a83e95c97945180d945c9" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_swe_sum</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a84e11143e2e5c8ec9bb563be4d224cee" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_swe_sum</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af3a6eb0cb255d31f2097cbf487a9975e" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>compute_weighted_area_ts_average</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a21c6266ecc38acb0bdaf9087b98506ce" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>establish_initial_state_from_model</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6aa5d65615c8f009511c92d115fd4710" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>expand_p_vector</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a98f4eb58e8e5906c6f43a8014e676727" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>extract_area_ts_property</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6a3e7fa6ba021b21f6a1abbb1a738c96" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>from_scaled</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5452f8182035974ac2a772f57d5d4792" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>from_scaled</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a973f82e36d67ddb753a2c05dff0ddef4" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>get_initial_state</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a9eff532fd0d086d9bfeab70e5f191592" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>is_active_parameter</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a47be90108bd371cf748a9c53d42970a7" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>model</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a61e69487e0a023199f9d9a9199db9745" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>n_catchments</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af72de88358821a048432b9d099f0b397" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>operator()</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a619914f52ab547f433676cba5cd90135" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>operator()</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1adfe129bd152e378a6123493839fcc19c" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a683ed17fa2154d1ef87dcbb457c3e0b3" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3220c4464a7735f03ad4494b9f956db0" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize_dream</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa176e5163bfc801c93a258cd298691c3" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize_dream</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa9ab8e4f1225013de73d7ab2472ef03d" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize_sceua</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5f40ae12b9673f513fbe3ccc3c679caf" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimize_sceua</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ab1bfa9505b131d6f465d3a41f6996819" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimizer</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a127beaee84ddbafc8dc4e7d536f141aa" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>optimizer</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a9a406510ad6941f4d4a11f6e197ba56a" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>p_expanded</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a32b486caf765b0707b831c57338ab90c" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>p_max</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a96ad06f443e7b20432f0dd4be539ecd2" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>p_min</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a5f1ba80c2364107b6f90043224e04561" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>p_vector</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aef726f27748c090027974d4a7083b195" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>parameter_accessor</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aafdd315906e5219d9e0a8b8ee8dfbc76" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>parameter_lower_bound</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aeb3992fa4a88c3036683dae1dd9af4fa" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>parameter_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a2dd3434d467e6f079d7b77b78e61b96d" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>parameter_upper_bound</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a09a6c7fc24fe060f682939392e424c1e" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>prepare_optimize</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ad1fe7c3580ac1204fe6acc2d3e21564b" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>print_progress_level</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a2a27a80800f3e53b691560c3c662bfe4" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>reduce_p_vector</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6793d8d0161d269d05c0f9563d7f6dab" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>region_model_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1abd875cab3afb4f296ab96879964d8449" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>reset_states</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a6846cf441df5d1156b73005cb219f52c" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>response_collector_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a32030f03ba19e7857b7f75ac9720f131" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>run</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aace152222deb93cf6b6f8bdf818952a9" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>set_parameter_ranges</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a4fce112251127c578f95a5b5d6513f97" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>set_target_specification</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1acbdadaf09aaabcc10ddd5158f73bd2d7" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>set_verbose_level</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1aa2b80f7e1be5ddf42a284626ff695201" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>state_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a3f0c86b75080905a00d1713d72ab6a97" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>target_specification_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a465f447636d0348323d8310a7c89f499" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>target_time_series_t</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a952151b56ed526fba4448da8b1961c9a" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>targets</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1a1e761e88720beecc3215cc19145a819e" prot="public" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>to_scaled</name></member>
      <member refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1af3737f43d9b5aaddc5a75ecd756ca283" prot="private" virt="non-virtual"><scope>shyft::core::model_calibration::optimizer</scope><name>vector_p</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
