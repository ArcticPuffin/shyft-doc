<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceshyft_1_1core_1_1model__calibration" kind="namespace" language="C++">
    <compoundname>shyft::core::model_calibration</compoundname>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1area__ts" prot="public">shyft::core::model_calibration::area_ts</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__sca" prot="public">shyft::core::model_calibration::detect_snow_sca</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__sca_3_01_t_00_01decltype_07_t_1_1snow__sca_00_01void_07_08_08_4" prot="public">shyft::core::model_calibration::detect_snow_sca&lt; T, decltype(T::snow_sca, void())&gt;</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__swe" prot="public">shyft::core::model_calibration::detect_snow_swe</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1detect__snow__swe_3_01_t_00_01decltype_07_t_1_1snow__swe_00_01void_07_08_08_4" prot="public">shyft::core::model_calibration::detect_snow_swe&lt; T, decltype(T::snow_swe, void())&gt;</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1dream__fx" prot="public">shyft::core::model_calibration::dream_fx</innerclass>
    <innerclass refid="classshyft_1_1core_1_1model__calibration_1_1optimizer" prot="public">shyft::core::model_calibration::optimizer</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1sceua__fx" prot="public">shyft::core::model_calibration::sceua_fx</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1target__specification" prot="public">shyft::core::model_calibration::target_specification</innerclass>
    <innerclass refid="structshyft_1_1core_1_1model__calibration_1_1ts__transform" prot="public">shyft::core::model_calibration::ts_transform</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceshyft_1_1core_1_1model__calibration_1a1d095e2da6d4d8f6e04f7d731a7ba36e" prot="public" static="no">
        <name>target_spec_calc_type</name>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a1d095e2da6d4d8f6e04f7d731a7ba36eab41aca78a12a708091116416ba16e6a7" prot="public">
          <name>NASH_SUTCLIFFE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a1d095e2da6d4d8f6e04f7d731a7ba36ea89b599e43debedc2cdf4ad2184bede20" prot="public">
          <name>KLING_GUPTA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a1d095e2da6d4d8f6e04f7d731a7ba36ea1c8092c3a94339284a50bc32f1be83c2" prot="public">
          <name>ABS_DIFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>calc_type to provide simple start of more than NS critera, first extension is diff of sum 2 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="170" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0" prot="public" static="no">
        <name>target_property_type</name>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0aa948a33766c00e5ed6144fc0451c303d" prot="public">
          <name>DISCHARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0a3b51a4a7d6566b611f89b8e6d6e76412" prot="public">
          <name>SNOW_COVERED_AREA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0a48dacfdcfa0a727aa9f9cb4ff028c7ed" prot="public">
          <name>SNOW_WATER_EQUIVALENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0a822e8756e649449b22cbf6e223c7d1fd" prot="public">
          <name>ROUTED_DISCHARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1core_1_1model__calibration_1a58f5d5497692aa1b65e50a31cb680ae0a56d55d78a96ddae548efb0541b9b9526" prot="public">
          <name>CELL_CHARGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>property_type for target specification </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="177" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="177" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceshyft_1_1core_1_1model__calibration_1adcd89ab052593045e6ce5c0fb061cfee" prot="public" static="no">
        <type>typename enable_if&lt; B, T &gt;::type</type>
        <definition>using shyft::core::model_calibration::enable_if_tx = typedef typename enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_tx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="286" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceshyft_1_1core_1_1model__calibration_1a29d1dd6f07e3da2747064b5f2de13eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::core::model_calibration::min_bobyqa</definition>
        <argsstring>(M &amp;model, vector&lt; double &gt; &amp;x, int max_n_evaluations, double tr_start, double tr_stop)</argsstring>
        <name>min_bobyqa</name>
        <param>
          <type>M &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_n_evaluations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tr_start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tr_stop</declname>
        </param>
        <briefdescription>
<para>Minimize the functional defined by model using the BOBYQA method. </para>        </briefdescription>
        <detaileddescription>
<para>Solve the optimization problem defined by the model M using the Bounded Optimization by Quadratic Approximation method by Michael J. D. Powell. See the &quot;The BOBYQA Algorithm for Bound Constrained Optimization Without Derivatives&quot;, Technical report, Department of Applied Mathematics and Theoretical Physics, University of Cambridge, 2009.</para><para>We use the dlib implementation of this algorithm, see <ulink url="www.dlib.net/optimization.html#find_min_bobyqa">dlib bobyqua</ulink>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>Model to be optimized, implementing the interface:<orderedlist>
<listitem><para>double operator()(const dlib::matrix&lt;double, 0, 1&gt; params) <ndash/>&gt; Evaluate the functional for parameter set params.</para></listitem><listitem><para>vector&lt;double&gt; to_scaled(std::vector&lt;double&gt; params) <ndash/>&gt; Scale original parameters to [0,1]</para></listitem><listitem><para>vector&lt;double&gt; from_scaled(const dlib::matrix&lt;double, 0, 1&gt; scaled_params) <ndash/>&gt; Unscale parameters </para></listitem></orderedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the model to be optimized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop/throw if not converging after n evaluations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial trust region radius </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr_stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stopping trust region radiusTemplate class to transform model evaluation into something that dream can run </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="46" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="46" bodyend="-1"/>
        <referencedby refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ae1c972c2059cb25bb119808b4e3a7ac8" compoundref="model__calibration_8h" startline="528" endline="536">shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1core_1_1model__calibration_1a220dadd8e1f05e89b7a8d866f2af1d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::core::model_calibration::min_dream</definition>
        <argsstring>(M &amp;model, vector&lt; double &gt; &amp;x, int max_n_evaluations)</argsstring>
        <name>min_dream</name>
        <param>
          <type>M &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_n_evaluations</declname>
        </param>
        <briefdescription>
<para>template function that find the x that minimizes the evaluated value of model M using DREAM algorithm </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>the model that need to have .to_scaled(x) and .from_scaled(x) to normalize the supplied parameters to range 0..1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the model to be evaluated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial x parameters to use (actually not, dream is completely random driven), filled in with the optimal values on return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>is the maximum number of iterations, currently not used, the routine returns when convergence is reached </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the goal function of m value, corresponding to the found x-vectorTemplate class to transform model evaluation into something that dream can run </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="91" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="91" bodyend="-1"/>
        <references refid="classshyft_1_1core_1_1optimizer_1_1dream_1a50bc04e18e06cdbdfed4f932e360e832" compoundref="dream__optimizer_8cpp" startline="9" endline="287">shyft::core::optimizer::dream::find_max</references>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1core_1_1model__calibration_1a382ab7d062b7bfa5337fd166f81c83e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::core::model_calibration::min_sceua</definition>
        <argsstring>(M &amp;model, vector&lt; double &gt; &amp;x, size_t max_n_evaluations, double x_eps=0.0001, double y_eps=0.0001)</argsstring>
        <name>min_sceua</name>
        <param>
          <type>M &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_n_evaluations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x_eps</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type>double</type>
          <declname>y_eps</declname>
          <defval>0.0001</defval>
        </param>
        <briefdescription>
<para>template for the function that finds the x that minimizes the evaluated value of model M using SCEUA algorithm </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>the model, that provide .to_scaled(x) and .from_scaled(x) to normalize the parameters to 0..1 range </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the model evaluated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>starting point for the parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_n_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop after max_n_interations reached(keep best x until then) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_eps</parametername>
</parameternamelist>
<parameterdescription>
<para>stop when all x&apos;s changes less than x_eps(recall range 0..1), convergence in x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_eps</parametername>
</parameternamelist>
<parameterdescription>
<para>stop when last y-values (model goal functions) seems to have converged (no improvements) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the goal function of m value, and x is the corresponding parameter-set. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>with text sceua: terminated before convergence or max iterations </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>normalized range is 0..1 so is min..max </para>        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="123" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" bodystart="123" bodyend="144"/>
        <references refid="optimizer__utils_8h_1a906f73011cf1685b8a9da2f9ee44e540" compoundref="optimizer__utils_8h" startline="45">__autoalloc__</references>
        <references refid="classshyft_1_1core_1_1optimizer_1_1sceua_1a6a357fe2862dd062b65a01180c450bb9" compoundref="sceua__optimizer_8cpp" startline="10" endline="107">shyft::core::optimizer::sceua::find_min</references>
        <references refid="namespaceshyft_1_1core_1_1optimizer_1a50d8a7acfa5c722a9b4fa540fb3b58cda81d68d9ca3c686ab5b8281c848e4b895" compoundref="sceua__optimizer_8h" startline="53">shyft::core::optimizer::FinishedFxConvergence</references>
        <references refid="namespaceshyft_1_1core_1_1optimizer_1a50d8a7acfa5c722a9b4fa540fb3b58cdac7c88fac2a9aa0013d4176be2fea4062" compoundref="sceua__optimizer_8h" startline="53">shyft::core::optimizer::FinishedXconvergence</references>
        <references refid="namespaceshyft_1_1core_1_1optimizer_1a50d8a7acfa5c722a9b4fa540fb3b58cdaaf3746175bb57d02e1ec7d45c12766f0" compoundref="sceua__optimizer_8h" startline="53">shyft::core::optimizer::FinishedMaxIterations</references>
        <referencedby refid="classshyft_1_1core_1_1model__calibration_1_1optimizer_1ab6ffadc58e1cc20648df8496a0e2ea7a" compoundref="model__calibration_8h" startline="578" endline="585">shyft::core::model_calibration::optimizer&lt; M, PA, PS &gt;::optimize_sceua</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/model_calibration.h" line="26" column="1"/>
  </compounddef>
</doxygen>
