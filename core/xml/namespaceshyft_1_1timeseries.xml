<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="namespaceshyft_1_1timeseries" kind="namespace">
    <compoundname>shyft::timeseries</compoundname>
    <innerclass refid="structshyft_1_1timeseries_1_1point" prot="public">shyft::timeseries::point</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__shared__ptr" prot="public">shyft::timeseries::is_shared_ptr</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__shared__ptr_3_01shared__ptr_3_01_t_01_4_01_4" prot="public">shyft::timeseries::is_shared_ptr&lt; shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1d__ref__t" prot="public">shyft::timeseries::d_ref_t</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1d__ref__t_3_01_t_00_01typename_01enable__if_3_01is__shared__ptr_3_0a96d8130ed21daa23ed2d27c0d825333" prot="public">shyft::timeseries::d_ref_t&lt; T, typename enable_if&lt; is_shared_ptr&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1d__ref__t_3_01_t_00_01typename_01enable__if_3_9is__shared__ptr_3_014f116213f2b3abaa65ce1a08cc424235" prot="public">shyft::timeseries::d_ref_t&lt; T, typename enable_if&lt;!is_shared_ptr&lt; T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1point__ts" prot="public">shyft::timeseries::point_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1time__shift__ts" prot="public">shyft::timeseries::time_shift_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1average__ts" prot="public">shyft::timeseries::average_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1accumulate__ts" prot="public">shyft::timeseries::accumulate_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1profile__description" prot="public">shyft::timeseries::profile_description</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1profile__accessor" prot="public">shyft::timeseries::profile_accessor</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1periodic__ts" prot="public">shyft::timeseries::periodic_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1bin__op" prot="public">shyft::timeseries::bin_op</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1bin__op_3_01double_00_01_b_00_01_o_00_01_t_a_01_4" prot="public">shyft::timeseries::bin_op&lt; double, B, O, TA &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1bin__op_3_01_a_00_01double_00_01_o_00_01_t_a_01_4" prot="public">shyft::timeseries::bin_op&lt; A, double, O, TA &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1op__axis" prot="public">shyft::timeseries::op_axis</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1op__axis_3_01double_00_01_r_01_4" prot="public">shyft::timeseries::op_axis&lt; double, R &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1op__axis_3_01_l_00_01double_01_4" prot="public">shyft::timeseries::op_axis&lt; L, double &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts" prot="public">shyft::timeseries::is_ts</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01point__ts_3_01_t_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; point_ts&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01shared__ptr_3_01point__ts_3_01_t_01_4_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; shared_ptr&lt; point_ts&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01time__shift__ts_3_01_t_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; time_shift_ts&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01shared__ptr_3_01time__shift__ts_3_01_t_01_4_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; shared_ptr&lt; time_shift_ts&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01average__ts_3_01_t_s_00_01_t_a_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; average_ts&lt; TS, TA &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01shared__ptr_3_01average__ts_3_01_t_s_00_01_t_a_01_4_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; shared_ptr&lt; average_ts&lt; TS, TA &gt; &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1is__ts_3_01bin__op_3_01_a_00_01_b_00_01_o_00_01_t_a_01_4_01_4" prot="public">shyft::timeseries::is_ts&lt; bin_op&lt; A, B, O, TA &gt; &gt;</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1op__max" prot="public">shyft::timeseries::op_max</innerclass>
    <innerclass refid="structshyft_1_1timeseries_1_1op__min" prot="public">shyft::timeseries::op_min</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1function__timeseries" prot="public">shyft::timeseries::function_timeseries</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1sin__fx" prot="public">shyft::timeseries::sin_fx</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1constant__timeseries" prot="public">shyft::timeseries::constant_timeseries</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1average__accessor" prot="public">shyft::timeseries::average_accessor</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1accumulate__accessor" prot="public">shyft::timeseries::accumulate_accessor</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1direct__accessor" prot="public">shyft::timeseries::direct_accessor</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1direct__accessor_3_01point__ts_3_01_t_a_01_4_00_01_t_a_01_4" prot="public">shyft::timeseries::direct_accessor&lt; point_ts&lt; TA &gt;, TA &gt;</innerclass>
    <innerclass refid="classshyft_1_1timeseries_1_1direct__accessor_3_01constant__timeseries_3_01_t_a_01_4_00_01_t_a_01_4" prot="public">shyft::timeseries::direct_accessor&lt; constant_timeseries&lt; TA &gt;, TA &gt;</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0ea" prot="public" static="no">
        <name>point_interpretation_policy</name>
        <enumvalue id="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0eaa2ba877b0fea2668327cdcdb24c59a34b" prot="public">
          <name>POINT_INSTANT_VALUE</name>
          <briefdescription>
<para>the point value represents the value at the specific time (or centered around that time),typically linear accessor </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0eaa7a710c91f7e701c216acf4a4610f1815" prot="public">
          <name>POINT_AVERAGE_VALUE</name>
          <briefdescription>
<para>the point value represents the average of the interval, typically stair-case start of step accessor </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates how points are mapped to f(t) </para>        </briefdescription>
        <detaileddescription>
<para>If there is a <ref refid="structshyft_1_1timeseries_1_1point__ts" kindref="compound">point_ts</ref>, this determines how we would draw f(t). Average values are typically staircase-start-of step, a constant over the interval for which the average is computed. State-in-time values are typically POINT_INSTANT_VALUES; and we could as an approximation draw a straight line between the points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="59" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="59" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceshyft_1_1timeseries_1a96bc98da0406c6f31e004a7c19bc9ae9" prot="public" static="no">
        <type><ref refid="structshyft_1_1time__axis_1_1fixed__dt" kindref="compound">shyft::time_axis::fixed_dt</ref></type>
        <definition>typedef shyft::time_axis::fixed_dt shyft::timeseries::timeaxis</definition>
        <argsstring></argsstring>
        <name>timeaxis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="48" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshyft_1_1timeseries_1af4f7f1bf58cb8281b7aefd7f53fbd964" prot="public" static="no">
        <type><ref refid="structshyft_1_1time__axis_1_1point__dt" kindref="compound">time_axis::point_dt</ref></type>
        <definition>typedef time_axis::point_dt shyft::timeseries::point_timeaxis</definition>
        <argsstring></argsstring>
        <name>point_timeaxis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="49" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceshyft_1_1timeseries_1ade0c417f4bbc2a2440d4804f1bc315fb" prot="public" static="no">
        <type><ref refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0ea" kindref="member">point_interpretation_policy</ref></type>
        <definition>typedef point_interpretation_policy shyft::timeseries::fx_policy_t</definition>
        <argsstring></argsstring>
        <name>fx_policy_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="64" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceshyft_1_1timeseries_1a367e6bfc3e16a3826515d557e196dbd6" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double shyft::timeseries::EPS</definition>
        <argsstring></argsstring>
        <name>EPS</name>
        <initializer>=1e-12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="35" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="35" bodyend="-1"/>
        <referencedby refid="namespaceshyft_1_1timeseries_1a6ac69cec9800d352526bab7474b52ab5" compoundref="core_2timeseries_8h" startline="46" endline="46">operator==</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a6ac69cec9800d352526bab7474b52ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool shyft::timeseries::operator==</definition>
        <argsstring>(const point &amp;a, const point &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structshyft_1_1timeseries_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structshyft_1_1timeseries_1_1point" kindref="compound">point</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>point a and b are considered equal if same time t and value-diff less than EPS </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="46" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="46" bodyend="46"/>
        <references refid="structshyft_1_1timeseries_1_1point_1add21b54a58681983b2e08ccf105987ff" compoundref="core_2timeseries_8h" startline="39">shyft::timeseries::point::t</references>
        <references refid="structshyft_1_1timeseries_1_1point_1a469563c5e1347b333435c2b1607f3569" compoundref="core_2timeseries_8h" startline="40">shyft::timeseries::point::v</references>
        <references refid="namespaceshyft_1_1timeseries_1a367e6bfc3e16a3826515d557e196dbd6" compoundref="core_2timeseries_8h" startline="35">EPS</references>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a992bc0f4c6d86ea04a9c7f1a18f8f5e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0ea" kindref="member">point_interpretation_policy</ref></type>
        <definition>point_interpretation_policy shyft::timeseries::result_policy</definition>
        <argsstring>(point_interpretation_policy a, point_interpretation_policy b)</argsstring>
        <name>result_policy</name>
        <param>
          <type><ref refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0ea" kindref="member">point_interpretation_policy</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0ea" kindref="member">point_interpretation_policy</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="67" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="67" bodyend="69"/>
        <references refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0eaa2ba877b0fea2668327cdcdb24c59a34b" compoundref="core_2timeseries_8h" startline="60">POINT_INSTANT_VALUE</references>
        <references refid="namespaceshyft_1_1timeseries_1a7e2ee9dcee400bdc9fa6a9c6c828d0eaa7a710c91f7e701c216acf4a4610f1815" compoundref="core_2timeseries_8h" startline="61">POINT_AVERAGE_VALUE</references>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_1af7dccadf0935e38b307c6f9c863e36af" compoundref="core_2timeseries_8h" startline="490" endline="493">shyft::timeseries::bin_op&lt; A, B, O, TA &gt;::bin_op</referencedby>
        <referencedby refid="structshyft_1_1api_1_1abin__op__ts_1a47dc16618f9aa1a1421e0862c17e862a" compoundref="api_2timeseries_8h" startline="544" endline="548">shyft::api::abin_op_ts::abin_op_ts</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a83679cda4dbb2771c7bdd952c35d0c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const U &amp;</type>
        <definition>const U&amp; shyft::timeseries::d_ref</definition>
        <argsstring>(const std::shared_ptr&lt; U &gt; &amp;p)</argsstring>
        <name>d_ref</name>
        <param>
          <type>const std::shared_ptr&lt; U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>d_ref function to d_ref object or shared_ptr </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_the" kindref="compound">The</ref> T d_ref(T) template to return a ref or const ref to T, if T is shared_ptr&lt;T&gt; or just T </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="83" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="83" bodyend="83"/>
        <referencedby refid="structshyft_1_1timeseries_1_1average__ts_1af29962d44b452cae36cc336d797c1470" compoundref="core_2timeseries_8h" startline="270" endline="276">shyft::timeseries::average_ts&lt; TS, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1accumulate__ts_1ae4b137a730dcf53d5dc8bcfdc8e74ef4" compoundref="core_2timeseries_8h" startline="316" endline="325">shyft::timeseries::accumulate_ts&lt; TS, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1accumulate__ts_1aec04b3ddaad65071135a1a4c0cd7c8ac" compoundref="core_2timeseries_8h" startline="326" endline="335">shyft::timeseries::accumulate_ts&lt; TS, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_1af7dccadf0935e38b307c6f9c863e36af" compoundref="core_2timeseries_8h" startline="490" endline="493">shyft::timeseries::bin_op&lt; A, B, O, TA &gt;::bin_op</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_1aa596fa86bea8eb20189266f1361a11b9" compoundref="core_2timeseries_8h" startline="494" endline="498">shyft::timeseries::bin_op&lt; A, B, O, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01double_00_01_b_00_01_o_00_01_t_a_01_4_1a52e0e1c60db1d2451e768292b7be8dee" compoundref="core_2timeseries_8h" startline="523" endline="526">shyft::timeseries::bin_op&lt; double, B, O, TA &gt;::bin_op</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01double_00_01_b_00_01_o_00_01_t_a_01_4_1ad11f5c8d35b31e27b89b0772684cf4c1" compoundref="core_2timeseries_8h" startline="528" endline="528">shyft::timeseries::bin_op&lt; double, B, O, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01double_00_01_b_00_01_o_00_01_t_a_01_4_1a5a3b6bbcc16e0b7570d2bd8e62e8699c" compoundref="core_2timeseries_8h" startline="529" endline="529">shyft::timeseries::bin_op&lt; double, B, O, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01_a_00_01double_00_01_o_00_01_t_a_01_4_1aad44a36dba068844ac54d24e7e287c9f" compoundref="core_2timeseries_8h" startline="543" endline="546">shyft::timeseries::bin_op&lt; A, double, O, TA &gt;::bin_op</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01_a_00_01double_00_01_o_00_01_t_a_01_4_1a9369df2acfd9bd2bc751802e85ed4816" compoundref="core_2timeseries_8h" startline="547" endline="547">shyft::timeseries::bin_op&lt; A, double, O, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1bin__op_3_01_a_00_01double_00_01_o_00_01_t_a_01_4_1aa8d7777deb42896bf949c30978246cc0" compoundref="core_2timeseries_8h" startline="548" endline="548">shyft::timeseries::bin_op&lt; A, double, O, TA &gt;::value</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1aee630ae7514664177f25f9f4b428594b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const U &amp;</type>
        <definition>const U&amp; shyft::timeseries::d_ref</definition>
        <argsstring>(const U &amp;u)</argsstring>
        <name>d_ref</name>
        <param>
          <type>const U &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para><ref refid="structshyft_1_1timeseries_1_1d__ref__t" kindref="compound">d_ref_t</ref> template to rip out T of shared_ptr&lt;T&gt; or T if T specified </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="84" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1aa44a502771f1a1f16976a2cb362c33c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ts</type>
          </param>
        </templateparamlist>
        <type><ref refid="structshyft_1_1timeseries_1_1time__shift__ts" kindref="compound">time_shift_ts</ref>&lt; typename std::decay&lt; Ts &gt;::type &gt;</type>
        <definition>time_shift_ts&lt;typename std::decay&lt;Ts&gt;::type &gt; shyft::timeseries::time_shift</definition>
        <argsstring>(Ts &amp;&amp;ts, utctimespan dt)</argsstring>
        <name>time_shift</name>
        <param>
          <type>Ts &amp;&amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1core_1a560b7b3b8bf6190f749284f5fadd7271" kindref="member">utctimespan</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>time_shift function, to ease syntax and usability </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="591" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1ad80786aa8a80e408aad5fd4bc07f995c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::operator+</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="607" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="607" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1aff1cf15876559c530861a30c599c7e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::operator-</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="617" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="617" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a1cec0af6c772c357088608cca89fb290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt; is_ts&lt;A&gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::operator-</definition>
        <argsstring>(const A &amp;lhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unary minus implemented as -1.0* ts </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="623" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="623" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a86dcfa5b7b6f52b9b228fc1ea7e2eb1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::operator*</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="633" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="633" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a3f4726023a257f491a0a669f62e6740f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::operator/</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="643" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="643" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1ac53ac01de119a07afeaf67d32cd151e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::max</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>max</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="653" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="653" bodyend="655"/>
        <referencedby refid="classshyft_1_1core_1_1optimizer_1_1dream_1ab8de8cd02866692d22de36a1402f1920" compoundref="dream__optimizer_8cpp" startline="9" endline="287">shyft::core::optimizer::dream::find_max</referencedby>
        <referencedby refid="classshyft_1_1core_1_1gamma__snow_1_1calculator_1a825080174ff4415c45fb491bb2b7cb6c" compoundref="gamma__snow_8h" startline="307" endline="518">shyft::core::gamma_snow::calculator&lt; P, S, R &gt;::step</referencedby>
        <referencedby refid="structshyft_1_1core_1_1land__type__fractions_1af56d70b639815a58df727275d3322066" compoundref="geo__cell__data_8h" startline="25" endline="44">shyft::core::land_type_fractions::land_type_fractions</referencedby>
        <referencedby refid="structshyft_1_1core_1_1hbv__tank_1_1calculator_1a4d67a673b33ea9c4d22853c3e8393fe2" compoundref="hbv__tank_8h" startline="54" endline="64">shyft::core::hbv_tank::calculator&lt; P &gt;::step</referencedby>
        <referencedby refid="classshyft_1_1core_1_1skaugen_1_1calculator_1a525a3676c307804187ba1ba118549daa" compoundref="skaugen_8h" startline="145" endline="338">shyft::core::skaugen::calculator&lt; P, S, R &gt;::step</referencedby>
        <referencedby refid="namespaceshyft_1_1time__axis_1aec71c1b0f362be4c335177d0f6c033f3" compoundref="time__axis_8h" startline="490" endline="510">shyft::time_axis::combine</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1op__max_1a38a7bfaa78e2d9b6b8be1591ece1d0d2" compoundref="core_2timeseries_8h" startline="594" endline="594">shyft::timeseries::op_max::operator()</referencedby>
        <referencedby refid="namespaceshyft_1_1timeseries_1a388c165bea7597e2fd0264fe272c5479" compoundref="core_2timeseries_8h" startline="823" endline="887">accumulate_value</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1a012eb12624d0ee33c5b88721e4c23136" compoundref="utctime__utilities_8h" startline="87" endline="91">shyft::core::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a4fa091ae89d99e00daff8f0821576893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;                        (is_ts&lt;A&gt;::value &amp;&amp; (is_floating_point&lt;B&gt;::value || is_ts&lt;B&gt;::value))                      ||(is_ts&lt;B&gt;::value &amp;&amp; (is_floating_point&lt;A&gt;::value || is_ts&lt;A&gt;::value))                    &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto shyft::timeseries::min</definition>
        <argsstring>(const A &amp;lhs, const B &amp;rhs)</argsstring>
        <name>min</name>
        <param>
          <type>const A &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const B &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="663" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="663" bodyend="665"/>
        <referencedby refid="classshyft_1_1core_1_1gamma__snow_1_1calculator_1a825080174ff4415c45fb491bb2b7cb6c" compoundref="gamma__snow_8h" startline="307" endline="518">shyft::core::gamma_snow::calculator&lt; P, S, R &gt;::step</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1grf_1af88765dca3e9af8439af63642855f3d5" compoundref="gaussian__random__field_8h" startline="116" endline="129">shyft::core::grf::distance_sort_order</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1grf_1a631ae8fd7913fecf88bfdda6e75ab015" compoundref="gaussian__random__field_8h" startline="354" endline="387">shyft::core::grf::calculate_local_weights_data</referencedby>
        <referencedby refid="structshyft_1_1core_1_1hbv__snow_1_1calculator_1ad8838f146beb6df1993aeb02a7f3d6dc" compoundref="hbv__snow_8h" startline="199" endline="206">shyft::core::hbv_snow::calculator&lt; P, S &gt;::update_state</referencedby>
        <referencedby refid="structshyft_1_1core_1_1hbv__tank_1_1calculator_1a4d67a673b33ea9c4d22853c3e8393fe2" compoundref="hbv__tank_8h" startline="54" endline="64">shyft::core::hbv_tank::calculator&lt; P &gt;::step</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1inverse__distance_1a136555db20a046dc420eb559ea54ed16" compoundref="inverse__distance_8h" startline="134" endline="241">shyft::core::inverse_distance::run_interpolation</referencedby>
        <referencedby refid="structshyft_1_1core_1_1kalman_1_1state_1a048229143072f559276adedfd2a79dfb" compoundref="kalman_8h" startline="28" endline="41">shyft::core::kalman::state::make_covariance</referencedby>
        <referencedby refid="classshyft_1_1core_1_1skaugen_1_1calculator_1a525a3676c307804187ba1ba118549daa" compoundref="skaugen_8h" startline="145" endline="338">shyft::core::skaugen::calculator&lt; P, S, R &gt;::step</referencedby>
        <referencedby refid="namespaceshyft_1_1time__axis_1aec71c1b0f362be4c335177d0f6c033f3" compoundref="time__axis_8h" startline="490" endline="510">shyft::time_axis::combine</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1op__min_1a6429809d5a06eb940e0eb9fe1d448564" compoundref="core_2timeseries_8h" startline="597" endline="597">shyft::timeseries::op_min::operator()</referencedby>
        <referencedby refid="namespaceshyft_1_1timeseries_1a0ae2034e3c41545804ad8afac947c2ba" compoundref="core_2timeseries_8h" startline="769" endline="802">hint_based_search</referencedby>
        <referencedby refid="namespaceshyft_1_1timeseries_1a388c165bea7597e2fd0264fe272c5479" compoundref="core_2timeseries_8h" startline="823" endline="887">accumulate_value</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1a012eb12624d0ee33c5b88721e4c23136" compoundref="utctime__utilities_8h" startline="87" endline="91">shyft::core::intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a0ae2034e3c41545804ad8afac947c2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t shyft::timeseries::hint_based_search</definition>
        <argsstring>(const S &amp;source, const utcperiod &amp;p, size_t i)</argsstring>
        <name>hint_based_search</name>
        <param>
          <type>const S &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="structshyft_1_1core_1_1utcperiod" kindref="compound">utcperiod</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>hint_based search to eliminate binary-search in irregular time-point series. </para>        </briefdescription>
        <detaileddescription>
<para>utilizing the fact that most access are periods, sequential, so the average_xxx functions can utilize this, and keep the returned index as a hint for the next request for average_xxx value. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>a point ts source, must have .get(i) -&gt;point, and .size(), and .index_of(t)-&gt;size_t </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>a point ts source as described above </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>utcperiod for which we search a start point &lt;= p.start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the start-of-search hint, could be -1, then ts.index_of(p.start) is used to figure out the ix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>lowerbound index or npos if not found </para></simplesect>
<simplesect kind="note"><para>We should specialize this for sources with computed time-axis to improve speed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="769" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="769" bodyend="802"/>
        <references refid="structshyft_1_1core_1_1utcperiod_1a84dc6f45bb83d9fdbf457bcd89db34e5" compoundref="utctime__utilities_8h" startline="79">shyft::core::utcperiod::start</references>
        <references refid="namespaceshyft_1_1timeseries_1a4fa091ae89d99e00daff8f0821576893" compoundref="core_2timeseries_8h" startline="663" endline="665">min</references>
        <referencedby refid="namespaceshyft_1_1timeseries_1a388c165bea7597e2fd0264fe272c5479" compoundref="core_2timeseries_8h" startline="823" endline="887">accumulate_value</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a388c165bea7597e2fd0264fe272c5479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::timeseries::accumulate_value</definition>
        <argsstring>(const S &amp;source, const utcperiod &amp;p, size_t &amp;last_idx, utctimespan &amp;tsum, bool linear=true)</argsstring>
        <name>accumulate_value</name>
        <param>
          <type>const S &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="structshyft_1_1core_1_1utcperiod" kindref="compound">utcperiod</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>last_idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1core_1a560b7b3b8bf6190f749284f5fadd7271" kindref="member">utctimespan</ref> &amp;</type>
          <declname>tsum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linear</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>accumulate_value provides a projection/interpretation of the values of a pointsource on to a time-axis as provided. This includes interpolation and true average, linear between points and nan-handling semantics. In addition the Accessor allows fast sequential access to these values using clever caching of the last position used in the underlying point source. <ref refid="namespace_the" kindref="compound">The</ref> time axis and point source can be of any type as listed above as long as the basic type requirement as described below are satisfied. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>point source, must provide:<orderedlist>
<listitem><para>.size() const  -&gt; number of points in the source</para></listitem><listitem><para>.index_of(utctime tx) const -&gt; return lower bound index or -1 for the supplied tx</para></listitem><listitem><para>.get(size_t i) const  -&gt; return the i&apos;th point (t,v) </para></listitem></orderedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>of type S </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the period [start,end) on time-axis, the range where we will accumulate/integrate the f(t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_idx</parametername>
<parametername>in/out</parametername>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>of the last time point used on the source, updated after each call. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tsum</parametername>
</parameternamelist>
<parameterdescription>
<para>out, the sum of time under non-nan areas of the curve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double, the area under the non-nan areas of the curve, specified by tsum ref-parameter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="823" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="823" bodyend="887"/>
        <references refid="namespaceshyft_1abb17c53f5f6d6eb8901cd2491680cba4" compoundref="core_2timeseries_8h" startline="21">shyft::nan</references>
        <references refid="namespaceshyft_1_1timeseries_1a0ae2034e3c41545804ad8afac947c2ba" compoundref="core_2timeseries_8h" startline="769" endline="802">hint_based_search</references>
        <references refid="structshyft_1_1timeseries_1_1point_1a469563c5e1347b333435c2b1607f3569" compoundref="core_2timeseries_8h" startline="40">shyft::timeseries::point::v</references>
        <references refid="structshyft_1_1timeseries_1_1point_1add21b54a58681983b2e08ccf105987ff" compoundref="core_2timeseries_8h" startline="39">shyft::timeseries::point::t</references>
        <references refid="structshyft_1_1core_1_1utcperiod_1a6633ffd83e46f9ef26098ffd4a2d61b7" compoundref="utctime__utilities_8h" startline="80">shyft::core::utcperiod::end</references>
        <references refid="namespaceshyft_1_1timeseries_1ac53ac01de119a07afeaf67d32cd151e7" compoundref="core_2timeseries_8h" startline="653" endline="655">max</references>
        <references refid="structshyft_1_1core_1_1utcperiod_1a84dc6f45bb83d9fdbf457bcd89db34e5" compoundref="utctime__utilities_8h" startline="79">shyft::core::utcperiod::start</references>
        <references refid="namespaceshyft_1_1timeseries_1a4fa091ae89d99e00daff8f0821576893" compoundref="core_2timeseries_8h" startline="663" endline="665">min</references>
        <references refid="structshyft_1_1core_1_1utcperiod_1a3aabb6cc1736f3b4c678efb7da0226e2" compoundref="utctime__utilities_8h" startline="71" endline="71">shyft::core::utcperiod::timespan</references>
        <referencedby refid="structshyft_1_1timeseries_1_1accumulate__ts_1ae4b137a730dcf53d5dc8bcfdc8e74ef4" compoundref="core_2timeseries_8h" startline="316" endline="325">shyft::timeseries::accumulate_ts&lt; TS, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1accumulate__ts_1aec04b3ddaad65071135a1a4c0cd7c8ac" compoundref="core_2timeseries_8h" startline="326" endline="335">shyft::timeseries::accumulate_ts&lt; TS, TA &gt;::operator()</referencedby>
        <referencedby refid="namespaceshyft_1_1timeseries_1a0d651da5f6e3bc99dabe237a36c6e66c" compoundref="core_2timeseries_8h" startline="908" endline="912">average_value</referencedby>
        <referencedby refid="classshyft_1_1timeseries_1_1accumulate__accessor_1ac69ef71ea4f7c3dcf0c7af51976f9dfc" compoundref="core_2timeseries_8h" startline="1031" endline="1044">shyft::timeseries::accumulate_accessor&lt; S, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1accumulate__ts_1a362e874d31b34c4aa617bf505e34df8d" compoundref="api_2timeseries_8h" startline="381" endline="389">shyft::api::accumulate_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1accumulate__ts_1aae09fdea98b9fe55f35e024fa9910133" compoundref="api_2timeseries_8h" startline="390" endline="399">shyft::api::accumulate_ts::value_at</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a0d651da5f6e3bc99dabe237a36c6e66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::timeseries::average_value</definition>
        <argsstring>(const S &amp;source, const utcperiod &amp;p, size_t &amp;last_idx, bool linear=true)</argsstring>
        <name>average_value</name>
        <param>
          <type>const S &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="structshyft_1_1core_1_1utcperiod" kindref="compound">utcperiod</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>last_idx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>linear</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>average_value provides a projection/interpretation of the values of a pointsource on to a time-axis as provided. This includes interpolation and true average, linear between points and nan-handling semantics. In addition the Accessor allows fast sequential access to these values using clever caching of the last position used in the underlying point source. <ref refid="namespace_the" kindref="compound">The</ref> time axis and point source can be of any type as listed above as long as the basic type requirement as described below are satisfied. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>point source, must provide:<orderedlist>
<listitem><para>.size() const  -&gt; number of points in the source</para></listitem><listitem><para>.index_of(utctime tx) const -&gt; return lower bound index or -1 for the supplied tx</para></listitem><listitem><para>.get(size_t i) const  -&gt; return the i&apos;th point (t,v) </para></listitem></orderedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>of type S </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the period [start,end) on time-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_idx</parametername>
<parametername>in/out</parametername>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>of the last time point used on the source, updated after each call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double, the value at the as true average of the specified period </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="908" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="908" bodyend="912"/>
        <references refid="namespaceshyft_1_1timeseries_1a388c165bea7597e2fd0264fe272c5479" compoundref="core_2timeseries_8h" startline="823" endline="887">accumulate_value</references>
        <references refid="namespaceshyft_1abb17c53f5f6d6eb8901cd2491680cba4" compoundref="core_2timeseries_8h" startline="21">shyft::nan</references>
        <referencedby refid="structshyft_1_1timeseries_1_1average__ts_1af29962d44b452cae36cc336d797c1470" compoundref="core_2timeseries_8h" startline="270" endline="276">shyft::timeseries::average_ts&lt; TS, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1timeseries_1_1profile__accessor_1a758308262e17caccc969f15c6ff8b390" compoundref="core_2timeseries_8h" startline="427" endline="431">shyft::timeseries::profile_accessor&lt; gta_t &gt;::value</referencedby>
        <referencedby refid="classshyft_1_1timeseries_1_1average__accessor_1a2500b93ac15478aa6857fa8dc2729d91" compoundref="core_2timeseries_8h" startline="995" endline="1000">shyft::timeseries::average_accessor&lt; S, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1average__ts_1a15bdf607d6c0e4fbd8bb89307cc7552b" compoundref="api_2timeseries_8h" startline="298" endline="303">shyft::api::average_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1average__ts_1a7c60adf5822e4b99420d47a8ac2ae671" compoundref="api_2timeseries_8h" startline="310" endline="318">shyft::api::average_ts::values</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a9b5d87ceebd877139e3e33282ad54182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::timeseries::l2_norm</definition>
        <argsstring>(A &amp;ts)</argsstring>
        <name>l2_norm</name>
        <param>
          <type>A &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Discrete l2 norm of input time series treated as a vector: (sqrt(sum(x_i))) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>only used for debug/printout during calibration </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>the accessor type that implement: -#: .size() number of elements the accessor can provide -#: .value(i) value of the i&apos;th element in the accessor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1131" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1131" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1ac3ecf5b3080c2f416bb7737978cfdbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TSA1</type>
          </param>
          <param>
            <type>class TSA2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::timeseries::nash_sutcliffe_goal_function</definition>
        <argsstring>(const TSA1 &amp;observed_ts, const TSA2 &amp;model_ts)</argsstring>
        <name>nash_sutcliffe_goal_function</name>
        <param>
          <type>const TSA1 &amp;</type>
          <declname>observed_ts</declname>
        </param>
        <param>
          <type>const TSA2 &amp;</type>
          <declname>model_ts</declname>
        </param>
        <briefdescription>
<para>Nash Sutcliffe model effiency coefficient based goal function http://en.wikipedia.org/wiki/NashE2%80%93Sutcliffe_model_efficiency_coefficient. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>throws runtime exception if supplied arguments differs in .size() or .size()==0 </para><simplesectsep/><para>if obs. is a constant, we get 1/0 </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TSA1</parametername>
</parameternamelist>
<parameterdescription>
<para>a ts accessor for the observed ts ( support .size() and double .value(i)) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TSA2</parametername>
</parameternamelist>
<parameterdescription>
<para>a ts accessor for the observed ts ( support .size() and double .value(i)) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observed_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the observed values for the model </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the (simulated) model output values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1- E, given E=n.s, i.e. 0 is best performance &gt; 0 .. +oo is less good performance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1151" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1151" bodyend="1168"/>
        <referencedby refid="namespaceshyft_1_1api_1adfcf8885fc2a933b20d3defc8321b5e1" compoundref="timeseries_8cpp" startline="206" endline="210">shyft::api::nash_sutcliffe</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a3ad8092259a7bc0368f2834a22470093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class running_stat_calculator</type>
          </param>
          <param>
            <type>class TSA1</type>
          </param>
          <param>
            <type>class TSA2</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double shyft::timeseries::kling_gupta_goal_function</definition>
        <argsstring>(const TSA1 &amp;observed_ts, const TSA2 &amp;model_ts, double s_r, double s_a, double s_b)</argsstring>
        <name>kling_gupta_goal_function</name>
        <param>
          <type>const TSA1 &amp;</type>
          <declname>observed_ts</declname>
        </param>
        <param>
          <type>const TSA2 &amp;</type>
          <declname>model_ts</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s_r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s_a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s_b</declname>
        </param>
        <briefdescription>
<para>KLING-GUPTA Journal of Hydrology 377 (2009) 80–91, page 83, formula (10), where shorthands are a=alpha, b=betha, q =sigma, u=my, s=simulated, o=observed </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>running_stat_calculator</parametername>
</parameternamelist>
<parameterdescription>
<para>template class like dlib::running_scalar_covariance&lt;double&gt; that supports .add(x), hten mean_x|_y stddev_x|_y,correlation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TSA1</parametername>
</parameternamelist>
<parameterdescription>
<para>time-series accessor that supports .size(), .value(i) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TSA2</parametername>
</parameternamelist>
<parameterdescription>
<para>time-series accessor that supports .size(), .value(i) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observed_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>the time-series that is the target, observed true value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_ts</parametername>
</parameternamelist>
<parameterdescription>
<para>the time-series that is the model simulated/calculated ts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_r</parametername>
</parameternamelist>
<parameterdescription>
<para>the kling gupta scale r factor (weight the correlation of goal function) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_a</parametername>
</parameternamelist>
<parameterdescription>
<para>the kling gupta scale a factor (weight the relative average of the goal function) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_b</parametername>
</parameternamelist>
<parameterdescription>
<para>the kling gupta scale b factor (weight the relative standard deviation of the goal function) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>EDs= 1-KGEs, that have a minimum at zero </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1189" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1189" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1aca91e9e5f5d19c66e45abfa781e74769" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; shyft::timeseries::calculate_percentiles_excel_method_full_sort</definition>
        <argsstring>(vector&lt; double &gt; &amp;samples, const vector&lt; int &gt; &amp;percentiles)</argsstring>
        <name>calculate_percentiles_excel_method_full_sort</name>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const vector&lt; int &gt; &amp;</type>
          <declname>percentiles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ulink url="http://en.wikipedia.org/wiki/Percentile">http://en.wikipedia.org/wiki/Percentile</ulink> NIST definitions, we use R7, R and excel seems more natural.. <ulink url="http://www.itl.nist.gov/div898/handbook/prc/section2/prc262.htm">http://www.itl.nist.gov/div898/handbook/prc/section2/prc262.htm</ulink> calculate percentile using full sort.. works nice for a larger set of percentiles. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1213" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1213" bodyend="1257"/>
        <referencedby refid="namespaceshyft_1_1timeseries_1ac3338df219f328629f72ab4e5ab0a02f" compoundref="core_2timeseries_8h" startline="1281" endline="1320">calculate_percentiles</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1ac3338df219f328629f72ab4e5ab0a02f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ts_t</type>
          </param>
          <param>
            <type>class ta_t</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="structshyft_1_1timeseries_1_1point__ts" kindref="compound">point_ts</ref>&lt; ta_t &gt; &gt;</type>
        <definition>std::vector&lt; point_ts&lt;ta_t&gt; &gt; shyft::timeseries::calculate_percentiles</definition>
        <argsstring>(const ta_t &amp;ta, const std::vector&lt; ts_t &gt; &amp;ts_list, const std::vector&lt; int &gt; &amp;percentiles, size_t min_t_steps=1000)</argsstring>
        <name>calculate_percentiles</name>
        <param>
          <type>const ta_t &amp;</type>
          <declname>ta</declname>
        </param>
        <param>
          <type>const std::vector&lt; ts_t &gt; &amp;</type>
          <declname>ts_list</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>percentiles</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_t_steps</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>calculate specified percentiles for supplied list of time-series over the specified time-axis </para>        </briefdescription>
        <detaileddescription>
<para>Percentiles for a set of timeseries, over a time-axis we would like to : percentiles_timeseries = calculate_percentiles(ts-id-list,time-axis,percentiles={0,25,50,100}) done like this 1..m ts-id, time-axis( start,dt, n), read 1..m ts into memory percentiles specified is np result is percentiles_timeseries accessor &quot;accumulate&quot; on time-axis to dt, using stair-case or linear between points create result vector[1..n] (the time-axis dimension) where each element is vector[1..np] (for each timestep, we get the percentiles for each timestep_i in timeaxis for each tsa_i: accessors(timeaxis,ts) samplevector[timestep_i].emplace_back( tsa_i(time_step_i) ) percentiles_timeseries[timestep_i]= calculate_percentiles(..)</para><para><simplesect kind="return"><para>percentiles_timeseries </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1281" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1281" bodyend="1320"/>
        <references refid="namespaceshyft_1_1api_1ace68f18daf5cc4554b4d6666a14307f2" compoundref="timeseries_8cpp" startline="172" endline="178">shyft::api::percentiles</references>
        <references refid="namespaceshyft_1_1timeseries_1aca91e9e5f5d19c66e45abfa781e74769" compoundref="core_2timeseries_8h" startline="1213" endline="1257">calculate_percentiles_excel_method_full_sort</references>
        <referencedby refid="namespaceshyft_1_1api_1ace68f18daf5cc4554b4d6666a14307f2" compoundref="timeseries_8cpp" startline="172" endline="178">shyft::api::percentiles</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1_1timeseries_1a84fcadcfa092d409f20c398304a45a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class rts_t</type>
          </param>
          <param>
            <type>class time_shift_func</type>
          </param>
          <param>
            <type>class ts_t</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; rts_t &gt;</type>
        <definition>std::vector&lt;rts_t&gt; shyft::timeseries::partition_by</definition>
        <argsstring>(const ts_t &amp;ts, const calendar &amp;cal, utctime t, utctimespan dt, size_t n, utctime t0, time_shift_func &amp;&amp;make_time_shift_fx)</argsstring>
        <name>partition_by</name>
        <param>
          <type>const ts_t &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>const <ref refid="structshyft_1_1core_1_1calendar" kindref="compound">calendar</ref> &amp;</type>
          <declname>cal</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1core_1abbf72b8ba32c19e92f5263070c1e9d13" kindref="member">utctime</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1core_1a560b7b3b8bf6190f749284f5fadd7271" kindref="member">utctimespan</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceshyft_1_1core_1abbf72b8ba32c19e92f5263070c1e9d13" kindref="member">utctime</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>time_shift_func &amp;&amp;</type>
          <declname>make_time_shift_fx</declname>
        </param>
        <briefdescription>
<para>partition_by convert a time-series into a vector of time-shifted partitions of ts with a common time-reference </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_the" kindref="compound">The</ref> partitions are simply specified by calendar, delta_t (could be symbolic, like YEAR:MONTH:DAY) and n. To make yearly partitions, just pass <ref refid="structshyft_1_1core_1_1calendar_1a205e2ca8b6bd1fcf32ff6dd0ba3b56f6" kindref="member">calendar::YEAR</ref> as dt. <ref refid="namespace_the" kindref="compound">The</ref> t-parameter set the start-time point in the source-time-series, like 1930.09.01 <ref refid="namespace_the" kindref="compound">The</ref> t0-parameter set the common start-time of the new partitions</para><para><ref refid="namespace_the" kindref="compound">The</ref> typical usage will be to use this function to partition years into a vector with e.g. 80 years, where we can do statistics, percentiles to compare and see the different effects of yearly season variations. Note that the function is more general, allowing any periodic partition, like daily, weekly, monthly etc. to study any pattern or statistics that might be periodic by the partition pattern.</para><para>For exposure to python, additional preparation of the partitions could be useful like .average( timeaxis(t0,deltahours(1),365*24)) to make all with an equal-sized time-axis</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>rts_t</parametername>
</parameternamelist>
<parameterdescription>
<para>return type time-series, equal to the return-type of the time_shift_func() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_shift_func</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type, that accepts ts_t and utctimespan as input and return rts_t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts_t</parametername>
</parameternamelist>
<parameterdescription>
<para>time-series type that goes into the partition algorithm </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>of type ts_t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cal</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the calendar to be used for possible calendar and time-zone semantic operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the time-point to start, e.g. 1930.09.01 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the calendar-semantic length of the partitions, e.g. <ref refid="structshyft_1_1core_1_1calendar_1a205e2ca8b6bd1fcf32ff6dd0ba3b56f6" kindref="member">calendar::YEAR</ref>|MONTH|DAY|WEEK </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of partitions, e.g. if you would have 80 yearly partitions, set n=80 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>the common time-reference for the partitions, e.g. 2016.09.01 for 80 yearly partitions 1930.09.01 to 2010.09.01 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>make_time_shift_fx</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that accepts const ts_t&amp; and utctimespan and returns a time-shifted ts of type rts_t</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the partition vector, std::vector&lt;rts_t&gt; of size n, where each partition ts have its start-value at t0</para></simplesect>
<simplesect kind="note"><para>t0 must align with multiple delta-t from t, e.g. if t is 1930.09.1, then t0 must have a pattern like YYYY.09.01 </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if t0 is not aligned with t, see note above. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="1356" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" bodystart="1356" bodyend="1365"/>
        <references refid="structshyft_1_1core_1_1calendar_1a84f7fe175df24171454772ca53439c1c" compoundref="utctime__utilities_8cpp" startline="182" endline="226">shyft::core::calendar::diff_units</references>
        <references refid="structshyft_1_1core_1_1calendar_1ad84d09c13398c7144c829713c2cf8433" compoundref="utctime__utilities_8cpp" startline="145" endline="180">shyft::core::calendar::add</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_cmake/shyft/core/timeseries.h" line="31" column="1"/>
  </compounddef>
</doxygen>
