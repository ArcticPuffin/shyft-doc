<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceshyft" kind="namespace" language="C++">
    <compoundname>shyft</compoundname>
    <innernamespace refid="namespaceshyft_1_1api">shyft::api</innernamespace>
    <innernamespace refid="namespaceshyft_1_1core">shyft::core</innernamespace>
    <innernamespace refid="namespaceshyft_1_1dtss">shyft::dtss</innernamespace>
    <innernamespace refid="namespaceshyft_1_1experimental">shyft::experimental</innernamespace>
    <innernamespace refid="namespaceshyft_1_1prediction">shyft::prediction</innernamespace>
    <innernamespace refid="namespaceshyft_1_1qm">shyft::qm</innernamespace>
    <innernamespace refid="namespaceshyft_1_1time__axis">shyft::time_axis</innernamespace>
    <innernamespace refid="namespaceshyft_1_1time__series">shyft::time_series</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceshyft_1abb17c53f5f6d6eb8901cd2491680cba4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double shyft::nan</definition>
        <argsstring></argsstring>
        <name>nan</name>
        <initializer>= std::numeric_limits&lt;double&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/time_series.h" line="26" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/time_series.h" bodystart="26" bodyend="-1"/>
        <referencedby refid="structshyft_1_1api_1_1abin__op__ts_1a37b9b83060a1e908eebcc7913334d86f" compoundref="time__series_8cpp" startline="115" endline="119">shyft::api::abin_op_ts::value_at</referencedby>
        <referencedby refid="namespaceshyft_1_1api_1ab56c4b1530e6251636bd4774843cd8e9" compoundref="time__series_8cpp" startline="505" endline="544">shyft::api::percentiles</referencedby>
        <referencedby refid="structshyft_1_1api_1_1abin__op__ts_1af6b407bf0d20fdefdc3bfe37961cf5c3" compoundref="time__series_8cpp" startline="550" endline="554">shyft::api::abin_op_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1extend__ts_1a6a3c695609772b4bf1e5ec0ae50de29e" compoundref="time__series_8cpp" startline="907" endline="940">shyft::api::extend_ts::value_at</referencedby>
        <referencedby refid="structshyft_1_1api_1_1extend__ts_1ac1dcb39eb75d6cb3b14ca885996a39bd" compoundref="time__series_8cpp" startline="942" endline="948">shyft::api::extend_ts::value</referencedby>
        <referencedby refid="structshyft_1_1core_1_1environment_1a5c3af59da98ae2e1f8562a18c1dedbb0" compoundref="cell__model_8h" startline="56" endline="70">shyft::core::environment&lt; timeaxis, temperature_ts, precipitation_ts, radiation_ts, relhum_ts, windspeed_ts &gt;::init</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1a1eebe6bc8b7ef45f2da14d0c5bbde022" compoundref="cell__model_8h" startline="153" endline="160">shyft::core::ts_init</referencedby>
        <referencedby refid="structshyft_1_1dtss_1_1ts__db_1ad4c23af2ab25560094469cb782d0c97d" compoundref="dtss__db_8h" startline="317" endline="335">shyft::dtss::ts_db::find</referencedby>
        <referencedby refid="classshyft_1_1prediction_1_1krls__rbf__predictor_1ab9a97291dc1ccc5dba9583a8ad6dae97" compoundref="predictions_8h" startline="253" endline="286">shyft::prediction::krls_rbf_predictor::mse_ts</referencedby>
        <referencedby refid="namespaceshyft_1_1time__series_1a8d177c10933e4f08c4d4855f08aaeaed" compoundref="core_2time__series_8h" startline="212" endline="293">shyft::time_series::accumulate_value</referencedby>
        <referencedby refid="namespaceshyft_1_1time__series_1a934cf353aad335a6686ff9589e258c55" compoundref="core_2time__series_8h" startline="315" endline="319">shyft::time_series::average_value</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1point__ts_1a1daaf4d03fd20370d5f7a698e79bbcfe" compoundref="core_2time__series_8h" startline="377" endline="387">shyft::time_series::point_ts&lt; time_axis::fixed_dt &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1average__ts_1a1a6c091cf3acf88f73a2c2225711739d" compoundref="core_2time__series_8h" startline="513" endline="518">shyft::time_series::average_ts&lt; TS, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1profile__description_1af9a009f7dec93a7de038a245ee1ae44c" compoundref="core_2time__series_8h" startline="605" endline="609">shyft::time_series::profile_description::operator()</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1glacier__melt__ts_1a6b6a97a9758ee611715a4ad0d145fc2f" compoundref="core_2time__series_8h" startline="766" endline="774">shyft::time_series::glacier_melt_ts&lt; std::shared_ptr&lt; shyft::api::ipoint_ts &gt; &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1glacier__melt__ts_1aaeba79bcb070636b026b7c9cae4163ea" compoundref="core_2time__series_8h" startline="775" endline="780">shyft::time_series::glacier_melt_ts&lt; std::shared_ptr&lt; shyft::api::ipoint_ts &gt; &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1convolve__w__ts_1a98aca59143d1446ac6e3d7e4c5a8a961" compoundref="core_2time__series_8h" startline="946" endline="955">shyft::time_series::convolve_w_ts&lt; apoint_ts &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1uniform__sum__ts_1a9e23275a549280a33735434eb5844aad" compoundref="core_2time__series_8h" startline="1012" endline="1017">shyft::time_series::uniform_sum_ts&lt; T &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1bin__op_1a8465872f4e3d543ac6ab708157cdfc94" compoundref="core_2time__series_8h" startline="1086" endline="1090">shyft::time_series::bin_op&lt; A, B, O, TA &gt;::operator()</referencedby>
        <referencedby refid="structshyft_1_1time__series_1_1bin__op_1a1f865c25774220768ea9b26719fde73f" compoundref="core_2time__series_8h" startline="1091" endline="1095">shyft::time_series::bin_op&lt; A, B, O, TA &gt;::value</referencedby>
        <referencedby refid="classshyft_1_1time__series_1_1rating__curve__function_1a8c58d088dd31c1b40c4ed2090308da0f" compoundref="core_2time__series_8h" startline="1371" endline="1384">shyft::time_series::rating_curve_function::flow</referencedby>
        <referencedby refid="classshyft_1_1time__series_1_1rating__curve__parameters_1af70ad35102fc4e81c4fde86f9608254c" compoundref="core_2time__series_8h" startline="1466" endline="1479">shyft::time_series::rating_curve_parameters::flow</referencedby>
        <referencedby refid="classshyft_1_1time__series_1_1average__accessor_1ada2969812936368e6bc2f96567d972e6" compoundref="core_2time__series_8h" startline="1838" endline="1852">shyft::time_series::average_accessor&lt; S, TA &gt;::value</referencedby>
        <referencedby refid="classshyft_1_1time__series_1_1accumulate__accessor_1a2b6d280d7022bfc054aebce5a73a965a" compoundref="core_2time__series_8h" startline="1883" endline="1903">shyft::time_series::accumulate_accessor&lt; S, TA &gt;::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1average__ts_1a1fe34528232188d448e848fb5bb0e76a" compoundref="api_2time__series_8h" startline="425" endline="432">shyft::api::average_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1average__ts_1aed736fefb64ffd8c66c8c1c724d9d34c" compoundref="api_2time__series_8h" startline="433" endline="438">shyft::api::average_ts::value_at</referencedby>
        <referencedby refid="structshyft_1_1api_1_1integral__ts_1a9e05be1ec56d4f3c40e92680bf78ff61" compoundref="api_2time__series_8h" startline="484" endline="490">shyft::api::integral_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1integral__ts_1a4d29a79a5f63dd0450999a0a6f55177f" compoundref="api_2time__series_8h" startline="491" endline="496">shyft::api::integral_ts::value_at</referencedby>
        <referencedby refid="structshyft_1_1api_1_1accumulate__ts_1a90aaa88444637ba7dd61314071aa9461" compoundref="api_2time__series_8h" startline="548" endline="556">shyft::api::accumulate_ts::value</referencedby>
        <referencedby refid="structshyft_1_1api_1_1accumulate__ts_1ae43d39be1a689b79b80f1e55bbe0ae46" compoundref="api_2time__series_8h" startline="557" endline="566">shyft::api::accumulate_ts::value_at</referencedby>
        <referencedby refid="namespaceshyft_1_1time__series_1abfd3fccc165e0a6c6270bf0ff91a3fbc" compoundref="time__series__merge_8h" startline="123" endline="143">shyft::time_series::nash_sutcliffe</referencedby>
        <referencedby refid="namespaceshyft_1_1qm_1a18f67ef3bac7782dbf2950e081572d45" compoundref="time__series__qm_8h" startline="254" endline="327">shyft::qm::quantile_mapping</referencedby>
        <referencedby refid="namespaceshyft_1_1time__series_1a3bd924896734239f8e83ade34408e3c5" compoundref="time__series__statistics_8h" startline="42" endline="73">shyft::time_series::extract_statistics</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceshyft_1a125b58e80ceedf1a1aa1566d78c599b6" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double shyft::mmh_to_m3s_scale_factor</definition>
        <argsstring></argsstring>
        <name>mmh_to_m3s_scale_factor</name>
        <initializer>= 1 / (3600.0*1000.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" line="4" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" bodystart="4" bodyend="-1"/>
        <referencedby refid="namespaceshyft_1a5e0f4c89b1ede28b7abbca532953b9cc" compoundref="unit__conversion_8h" startline="7" endline="9">mmh_to_m3s</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceshyft_1a5e0f4c89b1ede28b7abbca532953b9cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::mmh_to_m3s</definition>
        <argsstring>(double mm_pr_hour, double area_m2)</argsstring>
        <name>mmh_to_m3s</name>
        <param>
          <type>double</type>
          <declname>mm_pr_hour</declname>
        </param>
        <param>
          <type>double</type>
          <declname>area_m2</declname>
        </param>
        <briefdescription>
<para>convert [mm/h] over an area_m^2 to [m^3/s] units </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" line="7" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" bodystart="7" bodyend="9"/>
        <references refid="namespaceshyft_1a125b58e80ceedf1a1aa1566d78c599b6" compoundref="unit__conversion_8h" startline="4">mmh_to_m3s_scale_factor</references>
        <referencedby refid="namespaceshyft_1_1core_1_1hbv__stack_1a98bae2a3c968ad1ceeb1227957e1df78" compoundref="core_2hbv__stack_8h" startline="261" endline="338">shyft::core::hbv_stack::run_hbv_stack</referencedby>
        <referencedby refid="structshyft_1_1core_1_1hbv__stack_1_1all__response__collector_1ab5a954a0cb6fe91268370df417d61bc0" compoundref="hbv__stack__cell__model_8h" startline="79" endline="89">shyft::core::hbv_stack::all_response_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1hbv__stack_1_1discharge__collector_1a1400eb8fd41622663931cc4d30d50757" compoundref="hbv__stack__cell__model_8h" startline="120" endline="127">shyft::core::hbv_stack::discharge_collector::collect</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__gs__k_1a4ef4369324700b0b99c28335e63a5ebc" compoundref="core_2pt__gs__k_8h" startline="275" endline="351">shyft::core::pt_gs_k::run_pt_gs_k</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__gs__k_1_1all__response__collector_1a705aca51e7fd1cd1ed56afe589bea9fe" compoundref="pt__gs__k__cell__model_8h" startline="80" endline="89">shyft::core::pt_gs_k::all_response_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__gs__k_1_1discharge__collector_1a8689bf288882cb2777dbec8e24b48c61" compoundref="pt__gs__k__cell__model_8h" startline="120" endline="127">shyft::core::pt_gs_k::discharge_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__gs__k_1_1state__collector_1a3070820a56990b0596c68ac41a41c39a" compoundref="pt__gs__k__cell__model_8h" startline="193" endline="205">shyft::core::pt_gs_k::state_collector::collect</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="169" endline="245">shyft::core::pt_hs_k::run</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__hs__k_1_1all__response__collector_1a479fce5a4fc68ac50d8cff794c481043" compoundref="pt__hs__k__cell__model_8h" startline="82" endline="91">shyft::core::pt_hs_k::all_response_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__hs__k_1_1discharge__collector_1a3943df516324ade75c2c73bcfb415f77" compoundref="pt__hs__k__cell__model_8h" startline="122" endline="129">shyft::core::pt_hs_k::discharge_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__hs__k_1_1state__collector_1a91fa97622220707f7e5ca2e319a62477" compoundref="pt__hs__k__cell__model_8h" startline="174" endline="180">shyft::core::pt_hs_k::state_collector::collect</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__ss__k_1abd9fb9e68f8f46ba62aefb9b323e9abb" compoundref="core_2pt__ss__k_8h" startline="173" endline="246">shyft::core::pt_ss_k::run</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__ss__k_1_1all__response__collector_1a041358f5eefb706b5e580971a6bed194" compoundref="pt__ss__k__cell__model_8h" startline="78" endline="88">shyft::core::pt_ss_k::all_response_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__ss__k_1_1discharge__collector_1a139462fe9733e7a0334a07ed363aa687" compoundref="pt__ss__k__cell__model_8h" startline="119" endline="126">shyft::core::pt_ss_k::discharge_collector::collect</referencedby>
        <referencedby refid="structshyft_1_1core_1_1pt__ss__k_1_1state__collector_1a1bddb706090d40d3e2018cf4287bc7e4" compoundref="pt__ss__k__cell__model_8h" startline="190" endline="200">shyft::core::pt_ss_k::state_collector::collect</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceshyft_1ad4b12d928f2188e37168689e720fce61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::m3s_to_mmh</definition>
        <argsstring>(double m3s, double area_m2)</argsstring>
        <name>m3s_to_mmh</name>
        <param>
          <type>double</type>
          <declname>m3s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>area_m2</declname>
        </param>
        <briefdescription>
<para>convert [m^3/s] to [mm/h] over area_m^2 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" line="11" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/unit_conversion.h" bodystart="11" bodyend="13"/>
        <referencedby refid="namespaceshyft_1_1core_1_1hbv__stack_1a98bae2a3c968ad1ceeb1227957e1df78" compoundref="core_2hbv__stack_8h" startline="261" endline="338">shyft::core::hbv_stack::run_hbv_stack</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__gs__k_1a4ef4369324700b0b99c28335e63a5ebc" compoundref="core_2pt__gs__k_8h" startline="275" endline="351">shyft::core::pt_gs_k::run_pt_gs_k</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__hs__k_1a8f36026f35fc84f58d593fdd19cbab8d" compoundref="core_2pt__hs__k_8h" startline="169" endline="245">shyft::core::pt_hs_k::run</referencedby>
        <referencedby refid="namespaceshyft_1_1core_1_1pt__ss__k_1abd9fb9e68f8f46ba62aefb9b323e9abb" compoundref="core_2pt__ss__k_8h" startline="173" endline="246">shyft::core::pt_ss_k::run</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of Shyft.</para><para>Shyft is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>Shyft is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with Shyft, usually located under the Shyft root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>Adapted from early enki method programmed by Kolbjørn Engeland and Sjur Kolberg contains the actual evatransporation parameters and algorithm</para><para>contains all BayesianKriging stuff, like concrete useful Parameters and the templated BTK algorithm</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of SHyFT.</para><para>SHyFT is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>SHyFT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with SHyFT, usually located under the SHyFT root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>Theory is found in: Vrugt, J. et al: Accelerating Markov Chain Monte Carlo simulations by Differential Evolution with Self-Adaptive Randomized Subspace Sampling. Int. J. of Nonlinear Sciences and Numerical Simulation 10(3) 2009.</para><para>Thanks to Powel for contributing with the reimplementation of first DREAM implemented in the Enki project by Sjur Kolberg, Sintef</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of Shyft.</para><para>Shyft is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>Shyft is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with Shyft, usually located under the Shyft root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>Adapted from early enki method programmed by Kolbjørn Engeland and Sjur Kolberg</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of Shyft.</para><para>Shyft is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>Shyft is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with Shyft, usually located under the Shyft root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>This implementation is an adapted version of the temperature index model for glacier ice melt, Eq.(1), in &quot;Hock, R. (2003), Temperature index modelling in mountain areas, J. Hydrol., 282, 104-115.&quot; Implemented by Felix Matt</para><para>Contains all IDW related stuff, parameters, the IDW algorithm, IDW Models, and IDW Runner</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of SHyFT.</para><para>SHyFT is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>SHyFT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with SHyFT, usually located under the SHyFT root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>Theory is found in: Vrugt, J. et al: Accelerating Markov Chain Monte Carlo simulations by Differential Evolution with Self-Adaptive Randomized Subspace Sampling. Int. J. of Nonlinear Sciences and Numerical Simulation 10(3) 2009.</para><para>Thanks to Powel for contributing with the reimplementation</para><para>This file now contains mostly things to provide the PTxxK model,or in general a region model, based on distributed cells where each cell keep its local properties, state, and local. env. data, and when run, starts from an initial state, and steps through the time-axis giving response and state-changes as output.</para><para>Running this kind of region model, is two steps: -#: Interpolation step interpolating zero or more observation sources of temperature,precipitation radiation etc into the cell- midpoint. After the interpolation phase, all cells have temp,precip,wind,rel-hum,rad locally calculated. -#: Then a cell-layer, runs cell computations</para><para>Each cell model have unique cell-types, including parameters, state, response. A region model consists of one or more catchments, polygons, where the response from member-cells is collected.</para><para>Usage of a region-model is either ordinary run, where we collect everything, responses, states for the complete cells, and catchment-level results (aggregates pr. catchment).</para><para>-secondly, we run the region-model as part of calibration/parameter-optimization model, where the primary output of the run should be sufficient to provide data to calculate the goal-function(s) for the parameter optimization. In order to provide maximum speed, we minimize and specialize these computational models, so that cpu and memory footprint is minimal.</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of SHyFT.</para><para>SHyFT is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>SHyFT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with SHyFT, usually located under the SHyFT root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>Theory is found in: Vrugt, J. et al: Accelerating Markov Chain Monte Carlo simulations by Differential Evolution with Self-Adaptive Randomized Subspace Sampling. Int. J. of Nonlinear Sciences and Numerical Simulation 10(3) 2009.</para><para>Thanks to Powel for contributing with the reimplementation of first SCEUA implemented in the Enki project by Sjur Kolberg, Sintef</para><para>Copyright 2012 Statkraft Energi A/S</para><para>This file is part of SHyFT.</para><para>SHyFT is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para><para>SHyFT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with SHyFT, usually located under the SHyFT root directory in two files named COPYING.txt and COPYING_LESSER.txt. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>.</para><para>This implementation is a slightly improved and ported version of Skaugen&apos;s snow routine implemented in R, see [ref]. </para>    </detaileddescription>
    <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/actual_evapotranspiration.h" line="25" column="1"/>
  </compounddef>
</doxygen>
