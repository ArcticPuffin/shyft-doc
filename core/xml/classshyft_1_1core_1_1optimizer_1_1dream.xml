<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classshyft_1_1core_1_1optimizer_1_1dream" kind="class" language="C++" prot="public">
    <compoundname>shyft::core::optimizer::dream</compoundname>
    <includes refid="dream__optimizer_8h" local="no">dream_optimizer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classshyft_1_1core_1_1optimizer_1_1dream_1a1e8ea2e24068013958706297739f54f0" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool shyft::core::optimizer::dream::super_hack_stored</definition>
        <argsstring></argsstring>
        <name>super_hack_stored</name>
        <initializer>=false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="54" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1optimizer_1_1dream_1a3e3b765ea227aecda19817708d28c355" prot="private" static="no" mutable="yes">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::stored_std_norm_super_hack</definition>
        <argsstring></argsstring>
        <name>stored_std_norm_super_hack</name>
        <initializer>=0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="55" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1optimizer_1_1dream_1a80f28302ac62a7d029fe19f6fb672f6a" prot="private" static="no" mutable="yes">
        <type>default_random_engine</type>
        <definition>default_random_engine shyft::core::optimizer::dream::generator</definition>
        <argsstring></argsstring>
        <name>generator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="59" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classshyft_1_1core_1_1optimizer_1_1dream_1a47720c61b567a6ca0f88857a2c9d3bc5" prot="private" static="no" mutable="yes">
        <type>uniform_real_distribution&lt; double &gt;</type>
        <definition>uniform_real_distribution&lt;double&gt; shyft::core::optimizer::dream::distribution</definition>
        <argsstring></argsstring>
        <name>distribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="61" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a880faf2db2b1ce51018418821303553c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>shyft::core::optimizer::dream::dream</definition>
        <argsstring>()</argsstring>
        <name>dream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="64" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a50bc04e18e06cdbdfed4f932e360e832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::find_max</definition>
        <argsstring>(ifx &amp;fx, vector&lt; double &gt; &amp;x, size_t max_iterations) const</argsstring>
        <name>find_max</name>
        <param>
          <type><ref refid="structshyft_1_1core_1_1optimizer_1_1ifx" kindref="compound">ifx</ref> &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_iterations</declname>
        </param>
        <briefdescription>
<para>find x so that fx is at maximum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fx</parametername>
</parameternamelist>
<parameterdescription>
<para>callable of type ifx </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>(in,out) [0..1] normalized starting point for the x-vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>stop at max iterations</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the found maximum value </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if wrong parameters, or no convergence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="75" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="9" bodyend="287"/>
        <references refid="namespaceshyft_1_1time__series_1a9d6cbe98c5cc049e83fbce8715b64fa4" compoundref="core_2time__series_8h" startline="1709" endline="1711">shyft::time_series::max</references>
        <references refid="structshyft_1_1core_1_1optimizer_1_1ifx_1abbe9820f1f104074fd8372126138ea35">shyft::core::optimizer::ifx::evaluate</references>
        <references refid="namespaceshyft_1_1time__series_1adba838103548ab86fd91e469830eca9f" compoundref="core_2time__series_8h" startline="1719" endline="1721">shyft::time_series::min</references>
        <references refid="optimizer__utils_8h_1a906f73011cf1685b8a9da2f9ee44e540" compoundref="optimizer__utils_8h" startline="45">__autoalloc__</references>
        <referencedby refid="namespaceshyft_1_1core_1_1model__calibration_1a220dadd8e1f05e89b7a8d866f2af1d05" compoundref="model__calibration_8h" startline="91">shyft::core::model_calibration::min_dream</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a2c3d63ee18d067f098ccc17969bc86bc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::optimizer::dream::generate_candidate_parameters</definition>
        <argsstring>(vector&lt; double &gt; &amp;cand, const size_t I, const size_t N, const size_t d, const double cr, size_t &amp;d_eff, const vector&lt; vector&lt; double &gt;&gt; &amp;states) const</argsstring>
        <name>generate_candidate_parameters</name>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>cand</declname>
          <defname>x_candidate</defname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cr</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>d_eff</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; double &gt;&gt; &amp;</type>
          <declname>states</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GenerateCandidatePoint (originally MCsetup::DreamNewPoint in ENKI source) generates a new candidate point for one MCMC chain in DREAM. The current state of the other chains is used to generate the proposal point Single-parameter entries in each point may be rejected with probability 1-cr, so that the candidate differs from current only for a subset of dimensions. Theory: See Vrugt et al (2009) specified above the RunDream function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="78" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="354" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a383215501762f50b6f4614a9e82977d5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool shyft::core::optimizer::dream::check_for_outlier_chain</definition>
        <argsstring>(const vector&lt; vector&lt; double &gt;&gt; &amp;chainProbabilities, size_t reset, vector&lt; double &gt; &amp;omega, double &amp;lPlim) const</argsstring>
        <name>check_for_outlier_chain</name>
        <param>
          <type>const vector&lt; vector&lt; double &gt;&gt; &amp;</type>
          <declname>chainProbabilities</declname>
          <defname>chain_probabilities</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reset</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>omega</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>lPlim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MCsetup::check_for_outlier_chain (originally MCsetup::DreamOutlier in ENKI source) is an internal function used by RunDREAM autocalibration. DreamOutlier identifies chains for which the average log posterior density (LPD) over the last 50% of the iterations is much lower than from the other chains. The limit is based on the InterQuartile Range, which identifies the 25% and the 75% quantiles (Q1 and Q3) of chain-average densities, and the difference between the two (IQR). Return value is true if any of the chains is an outlier, pNcChains points to the pChainProb NcVar containing all iterations&apos; LPD values for all chains. lPlim reports the limit LPD for being an outlier, and omega reports the last-50%-average-LPD for all chains. The actual decision for each chain, and the replacement, is left to the calling site. Removing an outlier invalidates a lot of iterations with very bad LPD, which affects not only the outlier chain, but also the computation of the IQR. It is therefore necessary to to reset the burn-in period after an outlier removal. TODO 1: Call DreamOutlier once at the start of each iteration, mark the outlier chains, and let the removal of these take place instead of an ordinary MCMC step. TODO 2: Use a lower limit instead of the n/2, where any removal of an outlier sets the value of this lower limit to the current iter, and don&apos;t call DreamOutlier unless iter-lowlimit is at least 10. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="86" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="436" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a647cf9c6daa72713bc0e596a5da0905a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shyft::core::optimizer::dream::update_cr_dist</definition>
        <argsstring>(vector&lt; double &gt; &amp;cr_m, const vector&lt; int &gt; &amp;cr_l, const vector&lt; double &gt; &amp;cr_d) const</argsstring>
        <name>update_cr_dist</name>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>cr_m</declname>
        </param>
        <param>
          <type>const vector&lt; int &gt; &amp;</type>
          <declname>cr_l</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>cr_d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MCsetup::update_cr_dist is an internal function used by the Dream algorithm to alter the probability of the different cr values according to the average jump length achieved by the different values. Used only during burn-in. m is the index in the cr array, m = 1..n_cr cr_d[j] is the sum of squared distance achieved with cr[j] cr_l[j] is the number of attempts with cr[j] cr_m[j] is the average squared jumping distance with cr[j] </para>        </detaileddescription>
        <inbodydescription>
<para>TODO: 0 ? </para>        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="88" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="297" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a4e015dbcc00b5f4dc13cfe37cd3c7b8c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::get_gr_convergence</definition>
        <argsstring>(const vector&lt; vector&lt; vector&lt; double &gt;&gt;&gt; &amp;states, size_t nIterations, size_t nChains, size_t nParams, size_t reset, size_t iParam) const</argsstring>
        <name>get_gr_convergence</name>
        <param>
          <type>const vector&lt; vector&lt; vector&lt; double &gt;&gt;&gt; &amp;</type>
          <declname>states</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nIterations</declname>
          <defname>n_iterations</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nChains</declname>
          <defname>n_chains</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nParams</declname>
          <defname>n_parameters</defname>
        </param>
        <param>
          <type>size_t</type>
          <declname>reset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iParam</declname>
          <defname>parameter</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get_gr_convergence (originally MCsetup::GRConvergence in ENKI source) is an internal function used by the Dream algorithm. GRConvergence evaluates and returns the convergence criterion given in Gelman, A. and D. B. Rubin (1992): Inference from multiple iterative simulation using sequences. Stat. Science, vol 7, no 4, p. 457-472. The function does not access any member attributes of MCsetup. </para>        </detaileddescription>
        <inbodydescription>
<para>states || </para>        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="89" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="480" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1abc403dc904a49745de80d48282c0bdbf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::std_norm</definition>
        <argsstring>() const</argsstring>
        <name>std_norm</name>
        <briefdescription>
<para>MCsetup::std_norm is a standard normal distribution random number generator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="91" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.cpp" bodystart="323" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a45dde27949c47bffdd5f30c42f3faa33" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::normal</definition>
        <argsstring>(double mean, double sd) const</argsstring>
        <name>normal</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="92" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a6ff1fe52020482c0eaff849f1535c6c2" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::random01</definition>
        <argsstring>() const</argsstring>
        <name>random01</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="93" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a3d65d8063e43906355551214a8b5f2b3" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::random11</definition>
        <argsstring>() const</argsstring>
        <name>random11</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="94" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classshyft_1_1core_1_1optimizer_1_1dream_1a0f660fcc2d5d05f8ad32e07f1effacfd" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double shyft::core::optimizer::dream::random</definition>
        <argsstring>(double minv, double maxv) const</argsstring>
        <name>random</name>
        <param>
          <type>double</type>
          <declname>minv</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="95" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="95" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>dream optimizer implementing the </para>    </briefdescription>
    <detaileddescription>
<para>Originally MCsetup::RunDREAM in ENKI source, invokes the DiffeRential Evolution Adaptive Metropolis MCMC sampler to estimate the posterior distribution of parameters.</para><para>The number of chains (n_chains; N in Vrugt et al, 2009) is often chosen as d (n_parameters) or 2*d.</para><para>Theory is found in: Vrugt, J. et al: Accelerating Markov Chain Monte Carlo simulations by Differential Evolution with Self-Adaptive Randomized Subspace Sampling. Int. J. of Nonlinear Sciences and Numerical Simulation 10(3) 2009. </para>    </detaileddescription>
    <location file="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" line="52" column="1" bodyfile="/Data/johnbur/Dropbox/home/Programming/workspace/shyft_workspace/shyft/core/dream_optimizer.h" bodystart="52" bodyend="96"/>
    <listofallmembers>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a383215501762f50b6f4614a9e82977d5" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>check_for_outlier_chain</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a47720c61b567a6ca0f88857a2c9d3bc5" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>distribution</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a880faf2db2b1ce51018418821303553c" prot="public" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>dream</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a50bc04e18e06cdbdfed4f932e360e832" prot="public" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>find_max</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a2c3d63ee18d067f098ccc17969bc86bc" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>generate_candidate_parameters</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a80f28302ac62a7d029fe19f6fb672f6a" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>generator</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a4e015dbcc00b5f4dc13cfe37cd3c7b8c" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>get_gr_convergence</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a45dde27949c47bffdd5f30c42f3faa33" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>normal</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a0f660fcc2d5d05f8ad32e07f1effacfd" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>random</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a6ff1fe52020482c0eaff849f1535c6c2" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>random01</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a3d65d8063e43906355551214a8b5f2b3" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>random11</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1abc403dc904a49745de80d48282c0bdbf" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>std_norm</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a3e3b765ea227aecda19817708d28c355" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>stored_std_norm_super_hack</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a1e8ea2e24068013958706297739f54f0" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>super_hack_stored</name></member>
      <member refid="classshyft_1_1core_1_1optimizer_1_1dream_1a647cf9c6daa72713bc0e596a5da0905a" prot="private" virt="non-virtual"><scope>shyft::core::optimizer::dream</scope><name>update_cr_dist</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
