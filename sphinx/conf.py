# -*- coding: utf-8 -*-
#
# SHyFT documentation build configuration file, created by
# sphinx-quickstart on Thu Sep 24 19:06:49 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# required conda install modules in order to build documentation:
# nbsphinx, intersphinx, sphinx_rtd_theme (optional, but nice),
# breathe, sphinx

import re
import os
import shutil
from recommonmark.parser import CommonMarkParser


on_rtd = os.environ.get('READTHEDOCS') == 'True'
rtd_theme = False


# copy notebooks into place (they need to exist within the sphinx dir)
if os.path.exists('notebooks/'):
    shutil.rmtree('notebooks', ignore_errors=True)


shutil.copytree('../notebooks', 'notebooks')


try:
    import sphinx_rtd_theme
    rtd_theme = True
except:
    rtd_theme = False
    pass


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('../.'))
# autodoc_default_flags = ['members', 'inherited-members', 'undoc-members']

# --- dealing with boost python, using code from:
# https://github.com/eudoxos/minieigen
#
# def isBoostFunc(what, obj):
#     return what == 'function' and obj.__repr__().startswith('<Boost.Python.function object at 0x')
#
#
# def isBoostMethod(what, obj):
#     "I don't know how to distinguish boost and non-boost methods..."
#     return what == 'method' and obj.__repr__().startswith('<unbound method ')
#
#
# def isBoostStaticMethod(what, obj):
#     return what == 'method' and obj.__repr__().startswith('<Boost.Python.function object at 0x')
#
#
# def fixDocstring(app, what, name, obj, options, lines):
#     if isBoostFunc(what, obj) or isBoostMethod(what, obj) or isBoostStaticMethod(what, obj):
#         l2 = boostFuncSignature(name, obj)[1]
#         # we must replace lines one by one (in-place) :-|
#         # knowing that l2 is always shorter than lines (l2 is docstring with the signature stripped off)
#         for i in range(0, len(lines)):
#             lines[i] = l2[i] if i < len(l2) else ''
#
#
# def fixSignature(app, what, name, obj, options, signature, return_annotation):
#     print
#     what, obj
#     if what in ('attribute', 'class'):
#         return signature, None
#     elif isBoostFunc(what, obj):
#         sig = boostFuncSignature(name, obj)[0] or ' (wrapped c++ function)'
#         return sig, None
#     elif isBoostMethod(what, obj):
#         sig = boostFuncSignature(name, obj, removeSelf=True)[0]
#         return sig, None
#     elif isBoostStaticMethod(what, obj):
#         try:
#             sig = boostFuncSignature(name, obj, removeSelf=False)[0] + ' [STATIC]'
#         except:
#             sig = ' None [STATIC]'
#         return sig, None
#
#
# def boostFuncSignature(name, obj, removeSelf=False):
#     """Scan docstring of obj, returning tuple of properly formatted boost python signature
#     (first line of the docstring) and the rest of docstring (as list of lines).
#     The rest of docstring is stripped of 4 leading spaces which are automatically
#     added by boost.
#
#     removeSelf will attempt to remove the first argument from the signature.
#     """
#     doc = obj.__doc__
#     if doc == None:  # not a boost method
#         return None, None
#     nname = name.split('.')[-1]
#     docc = doc.split('\n')
#     if len(docc) < 2: return None, docc
#     doc1 = docc[1]
#     # functions with weird docstring, likely not documented by boost
#     if not re.match('^' + nname + r'(.*)->.*$', doc1):
#         return None, docc
#     if doc1.endswith(':'): doc1 = doc1[:-1]
#     strippedDoc = doc.split('\n')[2:]
#     # check if all lines are padded
#     allLinesHave4LeadingSpaces = True
#     for l in strippedDoc:
#         if l.startswith('    '): continue
#         allLinesHave4LeadingSpaces = False;
#         break
#     # remove the padding if so
#     if allLinesHave4LeadingSpaces: strippedDoc = [l[4:] for l in strippedDoc]
#     for i in range(len(strippedDoc)):
#         # fix signatures inside docstring (one function with multiple signatures)
#         strippedDoc[i], n = re.subn(r'([a-zA-Z_][a-zA-Z0-9_]*\() \(object\)arg1(, |)', r'\1',
#                                     strippedDoc[i].replace('->', '→'))
#     # inspect dosctring after mangling
#     sig = doc1.split('(', 1)[1]
#     if removeSelf:
#         # remove up to the first comma; if no comma present, then the method takes no arguments
#         # if [ precedes the comma, add it to the result (ugly!)
#         try:
#             ss = sig.split(',', 1)
#             if ss[0].endswith('['):
#                 sig = '[' + ss[1]
#             else:
#                 sig = ss[1]
#         except IndexError:
#             # grab the return value
#             try:
#                 sig = ') -> ' + sig.split('->')[-1]
#             except IndexError:
#                 sig = ')'
#     return '(' + sig, strippedDoc
#
#
# def setup(app):
#     app.connect('autodoc-process-docstring', fixDocstring)
#     app.connect('autodoc-process-signature', fixSignature)


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'breathe',
    'nbsphinx',
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
    'IPython.sphinxext.ipython_console_highlighting'
]

# nbsphinx
# WARNING: note the html command in the Makefile has customizations
# to copy, rsync back, and remove the notebooks directory into the
# sphinx directory during build
nbsphinx_execute = 'never'
nbsphinx_timeout = 1800
nbsphinx_allow_errors = True

# doxygen support using the breathe extension
breathe_projects = { "shyft": os.path.abspath('../core/xml/') }
breathe_default_project = "shyft"

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md', '.ipynb']
# Markdown support

source_parsers = {
	'.md': CommonMarkParser,
}
# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Shyft'
copyright = u'2017, Sigbjørn Helset, John F. Burkhart, Ola Skavhaug'
author = u'John F. Burkhart, Sigbjørn Helset, Ola Skavhaug and others'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build', '**.ipynb_checkpoints']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
if on_rtd:
    html_theme = 'default'
else:
    if rtd_theme:
        html_theme = "sphinx_rtd_theme"
    else:
        html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {
#    'collapse_navigation': False,
#    'display_version': False,
#    'navigation_depth': 3,
#}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []
if rtd_theme:
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'shyft_doc'

# -- Options for LaTeX output ---------------------------------------------
#
# latex_elements = {
# # The paper size ('letterpaper' or 'a4paper').
# #'papersize': 'letterpaper',
#
# # The font size ('10pt', '11pt' or '12pt').
# #'pointsize': '10pt',
#
# # Additional stuff for the LaTeX preamble.
# #'preamble': '',
#
# # Latex figure (float) alignment
# #'figure_align': 'htbp',
# }

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
# latex_documents = [
#   (master_doc, 'SHyFT.tex', u'Shyft Documentation',
#    u'Sigbjørn Helset, Ola Skavhaug and others', 'manual'),
# ]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
# man_pages = [
#     (master_doc, 'shyft', u'Shyft Documentation',
#      [author], 1)
# ]
#
# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
# texinfo_documents = [
#   (master_doc, 'SHyFT', u'Shyft Documentation',
#    author, 'Shyft', 'One line description of project.',
#    'Miscellaneous'),
# ]
#
# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False
